/**
 * Generated by orval v7.0.0 üç∫
 * Do not edit manually.
 * intra API
 * Backend API for intra
The API tries to follow the [Google API Design Guide](https://google.aip.dev/general)
- to retrieve resources across multiple collections use `-`
  - /projects/-/accounts/{account} is an example for find all the projects a account is in
- to shortcut the retrieval of information for the authenticated user use `me`
  - /accounts/me is an example for get your own account

Exceptions are the following:
- filter parameters only support '=' and '!='

 * OpenAPI spec version: 0.1
 */
import { customAxios } from './customAxios';
export type DeleteMissionboardProjectAccountParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type GetMissionboardProjectAccountParams = {
/**
 * If set to true will show unapproved projectaccounts
 */
show_unapproved?: boolean;
};

export type PostMissionboardProjectAccountBodyTwo = { [key: string]: unknown };

export type PostMissionboardProjectAccountParams = {
/**
 * Can only be used by admins.
If set to true will add the account without needing approval from leader.

 */
approved?: boolean;
/**
 * If set to true will add your own account and ignore body.
 */
self?: boolean;
};

export type GetMissionboardProjectAccountsParams = {
/**
 * Filter by [approved]
 */
filter?: string;
/**
 * If set to true will show unapproved projectaccounts
 */
show_unapproved?: boolean;
};

export type DeleteMissionboardProjectMilestoneParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionboardProjectMilestoneParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
milestone_id?: string;
};

export type DeleteMissionboardProjectParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionboardProjectParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
project_id?: string;
};

export type GetMissionboardProjects200 = ProjectArray | ProjectSummaryArray;

export type GetMissionboardProjectsFormat = typeof GetMissionboardProjectsFormat[keyof typeof GetMissionboardProjectsFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMissionboardProjectsFormat = {
  summary: 'summary',
  extended: 'extended',
} as const;

export type GetMissionboardProjectsParams = {
format?: GetMissionboardProjectsFormat;
/**
 * Filter by [project_state, approval_state]
 */
filter?: string;
/**
 * Order by [title, like_count]
 */
order_by?: string;
/**
 * include soft deleted resources
 */
show_deleted?: ShowDeletedParameter;
show_unapproved?: boolean;
};

export type GetAuthLogoutParams = {
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginMockScopesItem = typeof GetAuthLoginMockScopesItem[keyof typeof GetAuthLoginMockScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMockScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export type GetAuthLoginMockParams = {
scopes?: GetAuthLoginMockScopesItem[];
accountId?: string;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginMethod = typeof GetAuthLoginMethod[keyof typeof GetAuthLoginMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMethod = {
  github: 'github',
  google: 'google',
} as const;

export type GetAuthLoginParams = {
/**
 * login method
 */
method: GetAuthLoginMethod;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetCallbackGithubParams = {
/**
 * code
 */
code: string;
/**
 * state
 */
state: string;
};

export type GetAccount200 = _ | Public;

export type GetAccounts200 = AccountArray | AccountPublicArray;

/**
 * delete will return 2xx if the resource is not found
 */
export type AllowMissingParameter = boolean;

/**
 * include soft deleted resources
 */
export type ShowDeletedParameter = boolean;

/**
 * redirect url after action is completed
 */
export type RedirectUrlParameter = string;

/**
 * No Content
 */
export type R204Response = void;

/**
 * Conflict
 */
export type R409Response = void;

/**
 * Redirect
 */
export type R302Response = void;

/**
 * Not Found
 */
export type R404Response = void;

export type R400Response = {
  message: string;
};

export type R500Response = {
  message: string;
};

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export type GetMissionboardProjectResponse = ProjectArray | ProjectSummaryArray;

export type GetAccountResponse = _ | Public;

export type GetAccountsResponse = AccountArray | AccountPublicArray;

export interface ProjectAccountPost {
  account: string;
}

export interface ProjectAccount {
  account: Public;
  approved?: boolean;
  readonly name: string;
  project: string;
}

export interface ProjectMilestonePatch {
  /** @maxLength 1000 */
  description?: string;
  end_time?: string;
}

export interface ProjectMilestonePost {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
}

export type MissionboardMilestoneState = typeof MissionboardMilestoneState[keyof typeof MissionboardMilestoneState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardMilestoneState = {
  planned: 'planned',
  in_progress: 'in progress',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface ProjectMilestone {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
  readonly name: string;
  state: MissionboardMilestoneState;
}

export type EndTime = string;

export type KickoffTime = string;

export type GithubLink = string;

/**
 * @maxLength 1000
 */
export type DescriptionSkills = string;

/**
 * @maxLength 1000
 */
export type DescriptionGoal = string;

export type ProjectSummaryArray = ProjectSummary[];

/**
 * @maxLength 1000
 */
export type Description = string;

/**
 * @maxLength 255
 */
export type Title = string;

export interface ProjectPatch {
  description?: Description;
  description_goal?: DescriptionGoal;
  description_skills?: DescriptionSkills;
  github_link?: GithubLink;
  title?: Title;
}

export interface ProjectPost {
  description: Description;
  description_goal: DescriptionGoal;
  description_skills: DescriptionSkills;
  end_time?: EndTime;
  github_link: GithubLink;
  kickoff_time: KickoffTime;
  title: Title;
}

export type MissionboardProjectApprovalState = typeof MissionboardProjectApprovalState[keyof typeof MissionboardProjectApprovalState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectApprovalState = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type MissionboardProjectProjectState = typeof MissionboardProjectProjectState[keyof typeof MissionboardProjectProjectState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectProjectState = {
  active: 'active',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface ProjectSummary {
  completed_milestones_count: number;
  description: Description;
  like_count: number;
  milestones_count: number;
  name: Name;
  project_state: MissionboardProjectProjectState;
  title: Title;
}

export interface Project {
  approval_state: MissionboardProjectApprovalState;
  create_time: string;
  delete_time?: string;
  /** @maxLength 1000 */
  description: string;
  /** @maxLength 1000 */
  description_goal: string;
  /** @maxLength 1000 */
  description_skills: string;
  end_time?: string;
  github_link: string;
  kickoff_time: string;
  leader: string;
  like_count: number;
  readonly name: string;
  project_state: MissionboardProjectProjectState;
  /** @maxLength 255 */
  title: string;
  update_time: string;
}

export type ProjectArray = Project[];

export interface Event {
  begin_time: string;
  description: string;
  end_time: string;
  link: string;
  location: string;
  name: string;
  picture_uri: string;
  title: string;
  topic: string;
}

export type SessionScopesItem = typeof SessionScopesItem[keyof typeof SessionScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export interface Session {
  email: string;
  imageURI: string;
  name: string;
  nickName: string;
  scopes: SessionScopesItem[];
}

export type Admin = boolean;

/**
 * @maxLength 255
 */
export type Email = string;

/**
 * @maxLength 1
 */
export type Emoji = string;

export type BirthDate = string;

/**
 * @maxLength 255
 */
export type FamilyName = string;

/**
 * @maxLength 255
 */
export type GivenName = string;

/**
 * @maxLength 255
 */
export type NickName = string;

export interface Patch {
  admin?: Admin;
  birth_date?: BirthDate;
  email?: Email;
  emoji?: Emoji;
  family_name?: FamilyName;
  given_name?: GivenName;
  nick_name?: NickName;
}

export type Name = string;

export interface Public {
  name: Name;
  nick_name: NickName;
}

export type AccountPublicArray = Public[];

export interface _ {
  admin: boolean;
  birth_date?: string;
  create_time: string;
  /** @maxLength 255 */
  email: string;
  /** @maxLength 1 */
  emoji: string;
  /** @maxLength 255 */
  family_name: string;
  /** @maxLength 255 */
  github_id?: string;
  /** @maxLength 255 */
  given_name: string;
  /** @maxLength 255 */
  google_id?: string;
  readonly name: string;
  /** @maxLength 255 */
  nick_name: string;
  update_time: string;
}

export type AccountArray = _[];

export type Fix3 = GetMissionboardProjectResponse;

export type Fix2 = GetAccountResponse;

export type Fix1 = GetAccountsResponse;




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * @summary Get all accounts
 */
export const getAccounts = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccounts200>(
      {url: `/accounts`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get an account
 */
export const getAccount = (
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccount200>(
      {url: `/accounts/${account}`, method: 'GET'
    },
      options);
    }
  
/**
 * Admins can update all fields.
Users can only update their own user.
  And not admin, birth date, email fields.

 * @summary Update an account
 */
export const patchAccount = (
    account: string,
    patch: Patch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<_>(
      {url: `/accounts/${account}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patch
    },
      options);
    }
  
/**
 * @summary Github OAuth2 Callback
 */
export const getCallbackGithub = (
    params: GetCallbackGithubParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/callback/github`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Login
 */
export const getAuthLogin = (
    params: GetAuthLoginParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/login`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary login
 */
export const getAuthLoginMock = (
    params?: GetAuthLoginMockParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<void>(
      {url: `/auth/login/mock`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Logout
 */
export const getAuthLogout = (
    params?: GetAuthLogoutParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<void>(
      {url: `/auth/logout`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get the current session
 */
export const getSession = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Session>(
      {url: `/auth/session`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all events
 */
export const getEvents = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event[]>(
      {url: `/event`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all projects
 */
export const getMissionboardProjects = (
    params?: GetMissionboardProjectsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetMissionboardProjects200>(
      {url: `/missionboard/projects`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create a project
 */
export const postMissionboardProject = (
    projectPost: ProjectPost,
    params?: PostMissionboardProjectParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectPost,
        params
    },
      options);
    }
  
/**
 * @summary Get a project
 */
export const getMissionboardProject = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}`, method: 'GET'
    },
      options);
    }
  
/**
 * - for admins: allow update all fields
- for leader: allow update description, description_goal, description_skills, github_link
- for other users: return 403

 * @summary Update a project
 */
export const patchMissionboardProject = (
    project: string,
    projectPatch: ProjectPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: projectPatch
    },
      options);
    }
  
/**
 * @summary Delete a project
 */
export const deleteMissionboardProject = (
    project: string,
    params?: DeleteMissionboardProjectParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Undelete a project
 */
export const undeleteMissionboardProject = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}:undelete`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Reject a project
 */
export const rejectMissionboardProject = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Like a project
 */
export const likeMissionboardProject = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}:like`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a project
 */
export const approveMissionboardProject = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Project>(
      {url: `/missionboard/projects/${project}:approve`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get all milestones of a project
 */
export const getMissionboardProjectMilestones = (
    project: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectMilestone[]>(
      {url: `/missionboard/projects/${project}/milestones`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a milestone
 */
export const postMissionboardProjectMilestone = (
    project: string,
    projectMilestonePost: ProjectMilestonePost,
    params?: PostMissionboardProjectMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectMilestone>(
      {url: `/missionboard/projects/${project}/milestones`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectMilestonePost,
        params
    },
      options);
    }
  
/**
 * @summary Get a milestone
 */
export const getMissionboardProjectMilestone = (
    project: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectMilestone>(
      {url: `/missionboard/projects/${project}/milestones/${milestone}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a milestone
 */
export const patchMissionboardProjectMilestone = (
    project: string,
    milestone: string,
    projectMilestonePatch: ProjectMilestonePatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectMilestone>(
      {url: `/missionboard/projects/${project}/milestones/${milestone}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: projectMilestonePatch
    },
      options);
    }
  
/**
 * @summary Delete a milestone
 */
export const deleteMissionboardProjectMilestone = (
    project: string,
    milestone: string,
    params?: DeleteMissionboardProjectMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missionboard/projects/${project}/milestones/${milestone}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Complete a milestone
 */
export const completeMissionboardProjectMilestone = (
    project: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectMilestone>(
      {url: `/missionboard/projects/${project}/milestones/${milestone}:complete`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get all accounts in a project
 */
export const getMissionboardProjectAccounts = (
    project: string,
    params?: GetMissionboardProjectAccountsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectAccount[]>(
      {url: `/missionboard/projects/${project}/accounts`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Request to join a project
- For admins: allow add any account
- For self: allow add your own account

 * @summary Join a project
 */
export const postMissionboardProjectAccount = (
    project: string,
    postMissionboardProjectAccountBody?: ProjectAccountPost | PostMissionboardProjectAccountBodyTwo,
    params?: PostMissionboardProjectAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectAccount | R204Response>(
      {url: `/missionboard/projects/${project}/accounts`, method: 'POST',
      data: postMissionboardProjectAccountBody,
        params
    },
      options);
    }
  
/**
 * @summary Get an account in a project
 */
export const getMissionboardProjectAccount = (
    project: string,
    account: string,
    params?: GetMissionboardProjectAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectAccount[]>(
      {url: `/missionboard/projects/${project}/accounts/${account}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Remove an account from a project
 */
export const deleteMissionboardProjectAccount = (
    project: string,
    account: string,
    params?: DeleteMissionboardProjectAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missionboard/projects/${project}/accounts/${account}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Reject a join request
 */
export const rejectMissionboardProjectAccount = (
    project: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missionboard/projects/${project}/accounts/${account}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a join request
 */
export const approveMissionboardProjectAccount = (
    project: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<ProjectAccount>(
      {url: `/missionboard/projects/${project}/accounts/${account}:approve`, method: 'POST'
    },
      options);
    }
  
export type GetAccountsResult = NonNullable<Awaited<ReturnType<typeof getAccounts>>>
export type GetAccountResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>
export type PatchAccountResult = NonNullable<Awaited<ReturnType<typeof patchAccount>>>
export type GetCallbackGithubResult = NonNullable<Awaited<ReturnType<typeof getCallbackGithub>>>
export type GetAuthLoginResult = NonNullable<Awaited<ReturnType<typeof getAuthLogin>>>
export type GetAuthLoginMockResult = NonNullable<Awaited<ReturnType<typeof getAuthLoginMock>>>
export type GetAuthLogoutResult = NonNullable<Awaited<ReturnType<typeof getAuthLogout>>>
export type GetSessionResult = NonNullable<Awaited<ReturnType<typeof getSession>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetMissionboardProjectsResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProjects>>>
export type PostMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof postMissionboardProject>>>
export type GetMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProject>>>
export type PatchMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof patchMissionboardProject>>>
export type DeleteMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof deleteMissionboardProject>>>
export type UndeleteMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof undeleteMissionboardProject>>>
export type RejectMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof rejectMissionboardProject>>>
export type LikeMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof likeMissionboardProject>>>
export type ApproveMissionboardProjectResult = NonNullable<Awaited<ReturnType<typeof approveMissionboardProject>>>
export type GetMissionboardProjectMilestonesResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProjectMilestones>>>
export type PostMissionboardProjectMilestoneResult = NonNullable<Awaited<ReturnType<typeof postMissionboardProjectMilestone>>>
export type GetMissionboardProjectMilestoneResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProjectMilestone>>>
export type PatchMissionboardProjectMilestoneResult = NonNullable<Awaited<ReturnType<typeof patchMissionboardProjectMilestone>>>
export type DeleteMissionboardProjectMilestoneResult = NonNullable<Awaited<ReturnType<typeof deleteMissionboardProjectMilestone>>>
export type CompleteMissionboardProjectMilestoneResult = NonNullable<Awaited<ReturnType<typeof completeMissionboardProjectMilestone>>>
export type GetMissionboardProjectAccountsResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProjectAccounts>>>
export type PostMissionboardProjectAccountResult = NonNullable<Awaited<ReturnType<typeof postMissionboardProjectAccount>>>
export type GetMissionboardProjectAccountResult = NonNullable<Awaited<ReturnType<typeof getMissionboardProjectAccount>>>
export type DeleteMissionboardProjectAccountResult = NonNullable<Awaited<ReturnType<typeof deleteMissionboardProjectAccount>>>
export type RejectMissionboardProjectAccountResult = NonNullable<Awaited<ReturnType<typeof rejectMissionboardProjectAccount>>>
export type ApproveMissionboardProjectAccountResult = NonNullable<Awaited<ReturnType<typeof approveMissionboardProjectAccount>>>
