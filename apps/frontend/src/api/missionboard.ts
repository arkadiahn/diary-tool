/**
 * Generated by orval v6.5.3 üç∫
 * Do not edit manually.
 * intra API
 * Backend API for intra
The API tries to follow the [Google API Design Guide](https://google.aip.dev/general)
- to retrieve resources across multiple collections use `-`
  - /projects/-/accounts/{account} is an example for find all the projects a account is in
- to shortcut the retrieval of information for the authenticated user use `me`
  - /accounts/me is an example for get your own account

Exceptions are the following:
- filter parameters only support '=' and '!='

 * OpenAPI spec version: 0.1
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type DeleteMissionboardProjectAccountParams = { allow_missing?: AllowMissingParameter };

export type GetMissionboardProjectAccountParams = { show_unapproved?: boolean };

export type PostMissionboardProjectAccountBodyTwo = {};

export type PostMissionboardProjectAccountParams = { approved?: boolean; self?: boolean };

export type GetMissionboardProjectAccountsParams = { filter?: string; show_unapproved?: boolean };

export type DeleteMissionboardProjectMilestoneParams = { allow_missing?: AllowMissingParameter };

export type PostMissionboardProjectMilestoneParams = { milestone_id?: string };

export type DeleteMissionboardProjectParams = { allow_missing?: AllowMissingParameter };

export type PostMissionboardProjectParams = { project_id?: string };

export type GetMissionboardProjects200 = ProjectArray | ProjectSummaryArray;

export type GetMissionboardProjectsFormat = 'summary' | 'extended';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMissionboardProjectsFormat = {
  summary: 'summary' as GetMissionboardProjectsFormat,
  extended: 'extended' as GetMissionboardProjectsFormat,
};

export type GetMissionboardProjectsParams = { format?: GetMissionboardProjectsFormat; filter?: string; order_by?: string; show_deleted?: ShowDeletedParameter; show_unapproved?: boolean };

export type PostAuthLogoutParams = { redirect?: RedirectUrlParameter };

export type GetAuthLoginMockScopesItem = 'user' | 'admin';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMockScopesItem = {
  user: 'user' as GetAuthLoginMockScopesItem,
  admin: 'admin' as GetAuthLoginMockScopesItem,
};

export type GetAuthLoginMockParams = { scopes?: GetAuthLoginMockScopesItem[]; accountId?: string; redirect?: RedirectUrlParameter };

export type GetAuthLoginMethod = 'github' | 'google';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMethod = {
  github: 'github' as GetAuthLoginMethod,
  google: 'google' as GetAuthLoginMethod,
};

export type GetAuthLoginParams = { method: GetAuthLoginMethod; redirect?: RedirectUrlParameter };

export type GetCallbackGithubParams = { code: string; state: string };

export type GetAccount200 =  | Public;

export type GetAccounts200 = AccountArray | AccountPublicArray;

/**
 * delete will return 2xx if the resource is not found
 */
export type AllowMissingParameter = boolean;

/**
 * include soft deleted resources
 */
export type ShowDeletedParameter = boolean;

/**
 * redirect url after action is completed
 */
export type RedirectUrlParameter = string;

/**
 * No Content
 */
export type R204Response = void;

/**
 * Conflict
 */
export type R409Response = void;

/**
 * Redirect
 */
export type R302Response = void;

/**
 * Not Found
 */
export type R404Response = void;

export type R400Response = {
  message: string;
};

export type R500Response = {
  message: string;
};

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export type GetMissionboardProjectResponse = ProjectArray | ProjectSummaryArray;

export type GetAccountResponse =  | Public;

export type GetAccountsResponse = AccountArray | AccountPublicArray;

export interface ProjectAccountPost {
  account: string;
}

export interface ProjectAccount {
  readonly name: string;
  account: Public;
  project: string;
  approved?: boolean;
}

export interface ProjectMilestonePatch {
  description?: string;
  end_time?: string;
}

export interface ProjectMilestonePost {
  description: string;
  end_time: string;
}

export type MissionboardMilestoneState = 'planned' | 'in progress' | 'completed' | 'failed';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardMilestoneState = {
  planned: 'planned' as MissionboardMilestoneState,
  in_progress: 'in progress' as MissionboardMilestoneState,
  completed: 'completed' as MissionboardMilestoneState,
  failed: 'failed' as MissionboardMilestoneState,
};

export interface ProjectMilestone {
  readonly name: string;
  description: string;
  state: MissionboardMilestoneState;
  end_time: string;
}

export type EndTime = string;

export type KickoffTime = string;

export type GithubLink = string;

export type DescriptionSkills = string;

export type DescriptionGoal = string;

export type ProjectSummaryArray = ProjectSummary[];

export type Description = string;

export type Title = string;

export interface ProjectPatch {
  title?: Title;
  description?: Description;
  description_goal?: DescriptionGoal;
  description_skills?: DescriptionSkills;
  github_link?: GithubLink;
}

export interface ProjectPost {
  title: Title;
  description: Description;
  description_goal: DescriptionGoal;
  description_skills: DescriptionSkills;
  github_link: GithubLink;
  kickoff_time: KickoffTime;
  end_time?: EndTime;
}

export type MissionboardProjectApprovalState = 'pending' | 'approved' | 'rejected';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectApprovalState = {
  pending: 'pending' as MissionboardProjectApprovalState,
  approved: 'approved' as MissionboardProjectApprovalState,
  rejected: 'rejected' as MissionboardProjectApprovalState,
};

export type MissionboardProjectProjectState = 'active' | 'completed' | 'failed';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectProjectState = {
  active: 'active' as MissionboardProjectProjectState,
  completed: 'completed' as MissionboardProjectProjectState,
  failed: 'failed' as MissionboardProjectProjectState,
};

export interface ProjectSummary {
  name: Name;
  title: Title;
  description: Description;
  project_state: MissionboardProjectProjectState;
  like_count: number;
  milestones_count: number;
  completed_milestones_count: number;
}

export interface Project {
  readonly name: string;
  title: string;
  description: string;
  description_goal: string;
  description_skills: string;
  github_link: string;
  leader: string;
  project_state: MissionboardProjectProjectState;
  approval_state: MissionboardProjectApprovalState;
  like_count: number;
  kickoff_time: string;
  end_time?: string;
  create_time: string;
  update_time: string;
  delete_time?: string;
}

export type ProjectArray = Project[];

export interface Event {
  name: string;
  title: string;
  topic: string;
  picture_uri: string;
  link: string;
  description: string;
  location: string;
  begin_time: string;
  end_time: string;
}

export type SessionScopesItem = 'user' | 'admin';


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionScopesItem = {
  user: 'user' as SessionScopesItem,
  admin: 'admin' as SessionScopesItem,
};

export interface Session {
  name: string;
  nickName: string;
  email: string;
  imageURI: string;
  scopes: SessionScopesItem[];
}

export type Admin = boolean;

export type Email = string;

export type Emoji = string;

export type BirthDate = string;

export type FamilyName = string;

export type GivenName = string;

export type NickName = string;

export interface Patch {
  given_name?: GivenName;
  family_name?: FamilyName;
  nick_name?: NickName;
  birth_date?: BirthDate;
  emoji?: Emoji;
  email?: Email;
  admin?: Admin;
}

export type Name = string;

export interface Public {
  name: Name;
  nick_name: NickName;
}

export type AccountPublicArray = Public[];

export interface  {
  readonly name: string;
  given_name: string;
  family_name: string;
  nick_name: string;
  birth_date?: string;
  emoji: string;
  email: string;
  github_id?: string;
  google_id?: string;
  admin: boolean;
  create_time: string;
  update_time: string;
}

export type AccountArray = [];

export type Fix3 = GetMissionboardProjectResponse;

export type Fix2 = GetAccountResponse;

export type Fix1 = GetAccountsResponse;




  /**
 * @summary Get all accounts
 */
export const getAccounts = <TData = AxiosResponse<GetAccounts200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/accounts`,options
    );
  }

/**
 * @summary Get an account
 */
export const getAccount = <TData = AxiosResponse<GetAccount200>>(
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/accounts/${account}`,options
    );
  }

/**
 * Admins can update all fields.
Users can only update their own user.
  And not admin, birth date, email fields.

 * @summary Update an account
 */
export const patchAccount = <TData = AxiosResponse<unknown>>(
    account: string,
    patch: Patch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/accounts/${account}`,
      patch,options
    );
  }

/**
 * @summary Github OAuth2 Callback
 */
export const getCallbackGithub = <TData = AxiosResponse<unknown>>(
    params?: GetCallbackGithubParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/callback/github`,{
        params,
    ...options}
    );
  }

/**
 * @summary Login
 */
export const getAuthLogin = <TData = AxiosResponse<unknown>>(
    params?: GetAuthLoginParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/login`,{
        params,
    ...options}
    );
  }

/**
 * @summary login
 */
export const getAuthLoginMock = <TData = AxiosResponse<void>>(
    params?: GetAuthLoginMockParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/login/mock`,{
        params,
    ...options}
    );
  }

/**
 * @summary Logout
 */
export const postAuthLogout = <TData = AxiosResponse<void>>(
    params?: PostAuthLogoutParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/logout`,undefined,{
        params,
    ...options}
    );
  }

/**
 * @summary Get the current session
 */
export const getSession = <TData = AxiosResponse<Session>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/session`,options
    );
  }

/**
 * @summary Get all events
 */
export const getEvents = <TData = AxiosResponse<Event[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/event`,options
    );
  }

/**
 * @summary Get all projects
 */
export const getMissionboardProjects = <TData = AxiosResponse<GetMissionboardProjects200>>(
    params?: GetMissionboardProjectsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects`,{
        params,
    ...options}
    );
  }

/**
 * @summary Create a project
 */
export const postMissionboardProject = <TData = AxiosResponse<Project>>(
    projectPost: ProjectPost,
    params?: PostMissionboardProjectParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects`,
      projectPost,{
        params,
    ...options}
    );
  }

/**
 * @summary Get a project
 */
export const getMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects/${project}`,options
    );
  }

/**
 * - for admins: allow update all fields
- for leader: allow update description, description_goal, description_skills, github_link
- for other users: return 403

 * @summary Update a project
 */
export const patchMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string,
    projectPatch: ProjectPatch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/missionboard/projects/${project}`,
      projectPatch,options
    );
  }

/**
 * @summary Delete a project
 */
export const deleteMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string,
    params?: DeleteMissionboardProjectParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/missionboard/projects/${project}`,{
        params,
    ...options}
    );
  }

/**
 * @summary Undelete a project
 */
export const undeleteMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}undelete`,undefined,options
    );
  }

/**
 * @summary Reject a project
 */
export const rejectMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}reject`,undefined,options
    );
  }

/**
 * @summary Like a project
 */
export const likeMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}like`,undefined,options
    );
  }

/**
 * @summary Approve a project
 */
export const approveMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}approve`,undefined,options
    );
  }

/**
 * @summary Get all milestones of a project
 */
export const getMissionboardProjectMilestones = <TData = AxiosResponse<ProjectMilestone[]>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects/${project}/milestones`,options
    );
  }

/**
 * @summary Create a milestone
 */
export const postMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    projectMilestonePost: ProjectMilestonePost,
    params?: PostMissionboardProjectMilestoneParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}/milestones`,
      projectMilestonePost,{
        params,
    ...options}
    );
  }

/**
 * @summary Get a milestone
 */
export const getMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects/${project}/milestones/${milestone}`,options
    );
  }

/**
 * @summary Update a milestone
 */
export const patchMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string,
    projectMilestonePatch: ProjectMilestonePatch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/missionboard/projects/${project}/milestones/${milestone}`,
      projectMilestonePatch,options
    );
  }

/**
 * @summary Delete a milestone
 */
export const deleteMissionboardProjectMilestone = <TData = AxiosResponse<R204Response>>(
    project: string,
    milestone: string,
    params?: DeleteMissionboardProjectMilestoneParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/missionboard/projects/${project}/milestones/${milestone}`,{
        params,
    ...options}
    );
  }

/**
 * @summary Complete a milestone
 */
export const completeMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}/milestones/${milestone}complete`,undefined,options
    );
  }

/**
 * @summary Get all accounts in a project
 */
export const getMissionboardProjectAccounts = <TData = AxiosResponse<ProjectAccount[]>>(
    project: string,
    params?: GetMissionboardProjectAccountsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects/${project}/accounts`,{
        params,
    ...options}
    );
  }

/**
 * Request to join a project
- For admins: allow add any account
- For self: allow add your own account

 * @summary Join a project
 */
export const postMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount | R204Response>>(
    project: string,
    postMissionboardProjectAccountBody: ProjectAccountPost | PostMissionboardProjectAccountBodyTwo,
    params?: PostMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}/accounts`,
      postMissionboardProjectAccountBody,{
        params,
    ...options}
    );
  }

/**
 * @summary Get an account in a project
 */
export const getMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount[]>>(
    project: string,
    account: string,
    params?: GetMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/missionboard/projects/${project}/accounts/${account}`,{
        params,
    ...options}
    );
  }

/**
 * @summary Remove an account from a project
 */
export const deleteMissionboardProjectAccount = <TData = AxiosResponse<R204Response>>(
    project: string,
    account: string,
    params?: DeleteMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/missionboard/projects/${project}/accounts/${account}`,{
        params,
    ...options}
    );
  }

/**
 * @summary Reject a join request
 */
export const rejectMissionboardProjectAccount = <TData = AxiosResponse<R204Response>>(
    project: string,
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}/accounts/${account}reject`,undefined,options
    );
  }

/**
 * @summary Approve a join request
 */
export const approveMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount>>(
    project: string,
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/missionboard/projects/${project}/accounts/${account}approve`,undefined,options
    );
  }

