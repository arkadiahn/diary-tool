/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * missionboard API
 * Backend API for missionboard
 * OpenAPI spec version: 0.1
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";
export type PostProjectAccountBody = {
    account_id: string;
};

export type PostLoginGoogleParams = {
    /**
     * redirect url after login
     */
    redirect?: string;
};

/**
 * Redirect
 */
export type R302Response = void;

/**
 * Not Found
 */
export type R404Response = void;

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export type R500Response = {
    error?: string;
};

export type R400Response = {
    msg: string;
};

export interface Project {
    created_at?: string;
    description: string;
    description_goal?: string;
    description_skills?: string;
    end_at?: string;
    github_link?: string;
    id: string;
    leader_id?: string;
    like_count?: number;
    name: string;
    permit?: boolean;
    status?: ProjectStatus;
    updated_at?: string;
}

export type MilestoneStatus =
    (typeof MilestoneStatus)[keyof typeof MilestoneStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MilestoneStatus = {
    in_progress: "in progress",
    completed: "completed",
} as const;

export interface Milestone {
    created_at: string;
    description: string;
    end_at: string;
    id: string;
    project_id: string;
    status: MilestoneStatus;
    updated_at: string;
}

export interface ProjectAccount {
    account_id: string;
    id: string;
    project_id: string;
}

export interface Account {
    admin: boolean;
    birth_date?: string;
    created_at: string;
    email: string;
    emoji?: string;
    first_name: string;
    id: string;
    last_name: string;
    nick_name?: string;
    updated_at: string;
}

export interface PublicAccount {
    first_name: string;
}

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProjectStatus = {
    active: "active",
    abandoned: "abandoned",
    finished: "finished",
} as const;

export interface Project {
    created_at?: string;
    description: string;
    description_goal?: string;
    description_skills?: string;
    end_at?: string;
    github_link?: string;
    id: string;
    leader_id?: string;
    like_count?: number;
    name: string;
    permit?: boolean;
    status?: ProjectStatus;
    updated_at?: string;
}

/**
 * @summary Get all projects of an account
 */
export type getAccountProjectsResponse = {
    data: Project[];
    status: number;
    headers: Headers;
};

export const getGetAccountProjectsUrl = (accountId: string) => {
    return `https://api.getgas.io/api/v1/accounts/${accountId}/projects`;
};

export const getAccountProjects = async (
    accountId: string,
    options?: RequestInit,
): Promise<getAccountProjectsResponse> => {
    const res = await fetch(getGetAccountProjectsUrl(accountId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetAccountProjectsKey = (accountId: string) =>
    [`https://api.getgas.io/api/v1/accounts/${accountId}/projects`] as const;

export type GetAccountProjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountProjects>>
>;
export type GetAccountProjectsQueryError = Promise<R400Response | R500Response>;

/**
 * @summary Get all projects of an account
 */
export const useGetAccountProjects = <
    TError = Promise<R400Response | R500Response>,
>(
    accountId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getAccountProjects>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!accountId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAccountProjectsKey(accountId) : null));
    const swrFn = () => getAccountProjects(accountId, fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get all accounts
 */
export type getAccountsResponse = {
    data: PublicAccount[];
    status: number;
    headers: Headers;
};

export const getGetAccountsUrl = () => {
    return `https://api.getgas.io/api/v1/accounts`;
};

export const getAccounts = async (
    options?: RequestInit,
): Promise<getAccountsResponse> => {
    const res = await fetch(getGetAccountsUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetAccountsKey = () =>
    [`https://api.getgas.io/api/v1/accounts`] as const;

export type GetAccountsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccounts>>
>;
export type GetAccountsQueryError = Promise<
    R401Response | R403Response | R500Response
>;

/**
 * @summary Get all accounts
 */
export const useGetAccounts = <
    TError = Promise<R401Response | R403Response | R500Response>,
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getAccounts>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetAccountsKey() : null));
    const swrFn = () => getAccounts(fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get all accounts
 */
export type getAdminAccountsResponse = {
    data: Account[];
    status: number;
    headers: Headers;
};

export const getGetAdminAccountsUrl = () => {
    return `https://api.getgas.io/api/v1/admin/accounts`;
};

export const getAdminAccounts = async (
    options?: RequestInit,
): Promise<getAdminAccountsResponse> => {
    const res = await fetch(getGetAdminAccountsUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetAdminAccountsKey = () =>
    [`https://api.getgas.io/api/v1/admin/accounts`] as const;

export type GetAdminAccountsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAdminAccounts>>
>;
export type GetAdminAccountsQueryError = Promise<
    R401Response | R403Response | R500Response
>;

/**
 * @summary Get all accounts
 */
export const useGetAdminAccounts = <
    TError = Promise<R401Response | R403Response | R500Response>,
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAdminAccounts>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAdminAccountsKey() : null));
    const swrFn = () => getAdminAccounts(fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Update information about a account
 */
export type patchAdminAccountResponse = {
    data: Account;
    status: number;
    headers: Headers;
};

export const getPatchAdminAccountUrl = (accountId: string) => {
    return `https://api.getgas.io/api/v1/admin/accounts/${accountId}`;
};

export const patchAdminAccount = async (
    accountId: string,
    account: Account,
    options?: RequestInit,
): Promise<patchAdminAccountResponse> => {
    const res = await fetch(getPatchAdminAccountUrl(accountId), {
        ...options,
        method: "PATCH",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(account),
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getPatchAdminAccountMutationFetcher = (
    accountId: string,
    options?: RequestInit,
) => {
    return (
        _: Key,
        { arg }: { arg: Account },
    ): Promise<patchAdminAccountResponse> => {
        return patchAdminAccount(accountId, arg, options);
    };
};
export const getPatchAdminAccountMutationKey = (accountId: string) =>
    [`https://api.getgas.io/api/v1/admin/accounts/${accountId}`] as const;

export type PatchAdminAccountMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchAdminAccount>>
>;
export type PatchAdminAccountMutationError = Promise<
    R400Response | R404Response | R500Response
>;

/**
 * @summary Update information about a account
 */
export const usePatchAdminAccount = <
    TError = Promise<R400Response | R404Response | R500Response>,
>(
    accountId: string,
    options?: {
        swr?: SWRMutationConfiguration<
            Awaited<ReturnType<typeof patchAdminAccount>>,
            TError,
            Key,
            Account,
            Awaited<ReturnType<typeof patchAdminAccount>>
        > & { swrKey?: string };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey =
        swrOptions?.swrKey ?? getPatchAdminAccountMutationKey(accountId);
    const swrFn = getPatchAdminAccountMutationFetcher(accountId, fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Redirect to Google OAuth2 Login
 */
export type postLoginGoogleResponse = {
    data: unknown;
    status: number;
    headers: Headers;
};

export const getPostLoginGoogleUrl = (params?: PostLoginGoogleParams) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(
                key,
                value === null ? "null" : value.toString(),
            );
        }
    });

    return normalizedParams.size
        ? `https://api.getgas.io/api/v1/login/google?${normalizedParams.toString()}`
        : `https://api.getgas.io/api/v1/login/google`;
};

export const postLoginGoogle = async (
    params?: PostLoginGoogleParams,
    options?: RequestInit,
): Promise<postLoginGoogleResponse> => {
    const res = await fetch(getPostLoginGoogleUrl(params), {
        ...options,
        method: "POST",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getPostLoginGoogleMutationFetcher = (
    params?: PostLoginGoogleParams,
    options?: RequestInit,
) => {
    return (
        _: Key,
        __: { arg: Arguments },
    ): Promise<postLoginGoogleResponse> => {
        return postLoginGoogle(params, options);
    };
};
export const getPostLoginGoogleMutationKey = (params?: PostLoginGoogleParams) =>
    [
        `https://api.getgas.io/api/v1/login/google`,
        ...(params ? [params] : []),
    ] as const;

export type PostLoginGoogleMutationResult = NonNullable<
    Awaited<ReturnType<typeof postLoginGoogle>>
>;
export type PostLoginGoogleMutationError = Promise<
    R302Response | R400Response | R500Response
>;

/**
 * @summary Redirect to Google OAuth2 Login
 */
export const usePostLoginGoogle = <
    TError = Promise<R302Response | R400Response | R500Response>,
>(
    params?: PostLoginGoogleParams,
    options?: {
        swr?: SWRMutationConfiguration<
            Awaited<ReturnType<typeof postLoginGoogle>>,
            TError,
            Key,
            Arguments,
            Awaited<ReturnType<typeof postLoginGoogle>>
        > & { swrKey?: string };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey = swrOptions?.swrKey ?? getPostLoginGoogleMutationKey(params);
    const swrFn = getPostLoginGoogleMutationFetcher(params, fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary login
 */
export type postLoginMockResponse = {
    data: string[];
    status: number;
    headers: Headers;
};

export const getPostLoginMockUrl = () => {
    return `https://api.getgas.io/api/v1/login/mock`;
};

export const postLoginMock = async (
    options?: RequestInit,
): Promise<postLoginMockResponse> => {
    const res = await fetch(getPostLoginMockUrl(), {
        ...options,
        method: "POST",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getPostLoginMockMutationFetcher = (options?: RequestInit) => {
    return (_: Key, __: { arg: Arguments }): Promise<postLoginMockResponse> => {
        return postLoginMock(options);
    };
};
export const getPostLoginMockMutationKey = () =>
    [`https://api.getgas.io/api/v1/login/mock`] as const;

export type PostLoginMockMutationResult = NonNullable<
    Awaited<ReturnType<typeof postLoginMock>>
>;
export type PostLoginMockMutationError = Promise<R400Response>;

/**
 * @summary login
 */
export const usePostLoginMock = <TError = Promise<R400Response>>(options?: {
    swr?: SWRMutationConfiguration<
        Awaited<ReturnType<typeof postLoginMock>>,
        TError,
        Key,
        Arguments,
        Awaited<ReturnType<typeof postLoginMock>>
    > & { swrKey?: string };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey = swrOptions?.swrKey ?? getPostLoginMockMutationKey();
    const swrFn = getPostLoginMockMutationFetcher(fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary logout
 */
export type logoutResponse = {
    data: void;
    status: number;
    headers: Headers;
};

export const getLogoutUrl = () => {
    return `https://api.getgas.io/api/v1/logout`;
};

export const logout = async (
    options?: RequestInit,
): Promise<logoutResponse> => {
    const res = await fetch(getLogoutUrl(), {
        ...options,
        method: "POST",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getLogoutMutationFetcher = (options?: RequestInit) => {
    return (_: Key, __: { arg: Arguments }): Promise<logoutResponse> => {
        return logout(options);
    };
};
export const getLogoutMutationKey = () =>
    [`https://api.getgas.io/api/v1/logout`] as const;

export type LogoutMutationResult = NonNullable<
    Awaited<ReturnType<typeof logout>>
>;
export type LogoutMutationError = Promise<unknown>;

/**
 * @summary logout
 */
export const useLogout = <TError = Promise<unknown>>(options?: {
    swr?: SWRMutationConfiguration<
        Awaited<ReturnType<typeof logout>>,
        TError,
        Key,
        Arguments,
        Awaited<ReturnType<typeof logout>>
    > & { swrKey?: string };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey = swrOptions?.swrKey ?? getLogoutMutationKey();
    const swrFn = getLogoutMutationFetcher(fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get all accounts in a project
 */
export type getProjectAccountsResponse = {
    data: Account[];
    status: number;
    headers: Headers;
};

export const getGetProjectAccountsUrl = (projectId: string) => {
    return `https://api.getgas.io/api/v1/projects/${projectId}/accounts`;
};

export const getProjectAccounts = async (
    projectId: string,
    options?: RequestInit,
): Promise<getProjectAccountsResponse> => {
    const res = await fetch(getGetProjectAccountsUrl(projectId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetProjectAccountsKey = (projectId: string) =>
    [`https://api.getgas.io/api/v1/projects/${projectId}/accounts`] as const;

export type GetProjectAccountsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectAccounts>>
>;
export type GetProjectAccountsQueryError = Promise<
    R400Response | R401Response | R403Response | R404Response | R500Response
>;

/**
 * @summary Get all accounts in a project
 */
export const useGetProjectAccounts = <
    TError = Promise<
        R400Response | R401Response | R403Response | R404Response | R500Response
    >,
>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectAccounts>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectAccountsKey(projectId) : null));
    const swrFn = () => getProjectAccounts(projectId, fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Add a account to a project
 */
export type postProjectAccountResponse = {
    data: ProjectAccount;
    status: number;
    headers: Headers;
};

export const getPostProjectAccountUrl = (projectId: string) => {
    return `https://api.getgas.io/api/v1/projects/${projectId}/accounts`;
};

export const postProjectAccount = async (
    projectId: string,
    postProjectAccountBody: PostProjectAccountBody,
    options?: RequestInit,
): Promise<postProjectAccountResponse> => {
    const res = await fetch(getPostProjectAccountUrl(projectId), {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(postProjectAccountBody),
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getPostProjectAccountMutationFetcher = (
    projectId: string,
    options?: RequestInit,
) => {
    return (
        _: Key,
        { arg }: { arg: PostProjectAccountBody },
    ): Promise<postProjectAccountResponse> => {
        return postProjectAccount(projectId, arg, options);
    };
};
export const getPostProjectAccountMutationKey = (projectId: string) =>
    [`https://api.getgas.io/api/v1/projects/${projectId}/accounts`] as const;

export type PostProjectAccountMutationResult = NonNullable<
    Awaited<ReturnType<typeof postProjectAccount>>
>;
export type PostProjectAccountMutationError = Promise<
    R400Response | R401Response | R403Response | R404Response | R500Response
>;

/**
 * @summary Add a account to a project
 */
export const usePostProjectAccount = <
    TError = Promise<
        R400Response | R401Response | R403Response | R404Response | R500Response
    >,
>(
    projectId: string,
    options?: {
        swr?: SWRMutationConfiguration<
            Awaited<ReturnType<typeof postProjectAccount>>,
            TError,
            Key,
            PostProjectAccountBody,
            Awaited<ReturnType<typeof postProjectAccount>>
        > & { swrKey?: string };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey =
        swrOptions?.swrKey ?? getPostProjectAccountMutationKey(projectId);
    const swrFn = getPostProjectAccountMutationFetcher(projectId, fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get all milestones of a project
 */
export type getProjectMilestonesResponse = {
    data: Milestone[];
    status: number;
    headers: Headers;
};

export const getGetProjectMilestonesUrl = (projectId: string) => {
    return `https://api.getgas.io/api/v1/projects/${projectId}/milestones`;
};

export const getProjectMilestones = async (
    projectId: string,
    options?: RequestInit,
): Promise<getProjectMilestonesResponse> => {
    const res = await fetch(getGetProjectMilestonesUrl(projectId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetProjectMilestonesKey = (projectId: string) =>
    [`https://api.getgas.io/api/v1/projects/${projectId}/milestones`] as const;

export type GetProjectMilestonesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectMilestones>>
>;
export type GetProjectMilestonesQueryError = Promise<unknown>;

/**
 * @summary Get all milestones of a project
 */
export const useGetProjectMilestones = <TError = Promise<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectMilestones>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectMilestonesKey(projectId) : null));
    const swrFn = () => getProjectMilestones(projectId, fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get a project by id
 */
export type getProjectByIdResponse = {
    data: Project;
    status: number;
    headers: Headers;
};

export const getGetProjectByIdUrl = (projectId: string) => {
    return `https://api.getgas.io/api/v1/projects/${projectId}`;
};

export const getProjectById = async (
    projectId: string,
    options?: RequestInit,
): Promise<getProjectByIdResponse> => {
    const res = await fetch(getGetProjectByIdUrl(projectId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetProjectByIdKey = (projectId: string) =>
    [`https://api.getgas.io/api/v1/projects/${projectId}`] as const;

export type GetProjectByIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectById>>
>;
export type GetProjectByIdQueryError = Promise<R400Response | R500Response>;

/**
 * @summary Get a project by id
 */
export const useGetProjectById = <
    TError = Promise<R400Response | R500Response>,
>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectById>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
        fetch?: RequestInit;
    },
) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectByIdKey(projectId) : null));
    const swrFn = () => getProjectById(projectId, fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Get all projects
 */
export type getProjectsResponse = {
    data: Project[];
    status: number;
    headers: Headers;
};

export const getGetProjectsUrl = () => {
    return `https://api.getgas.io/api/v1/projects`;
};

export const getProjects = async (
    options?: RequestInit,
): Promise<getProjectsResponse> => {
    const res = await fetch(getGetProjectsUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getGetProjectsKey = () =>
    [`https://api.getgas.io/api/v1/projects`] as const;

export type GetProjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjects>>
>;
export type GetProjectsQueryError = Promise<R500Response>;

/**
 * @summary Get all projects
 */
export const useGetProjects = <TError = Promise<R500Response>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjects>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectsKey() : null));
    const swrFn = () => getProjects(fetchOptions);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions,
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @summary Create a project
 */
export type postProjectResponse = {
    data: Project;
    status: number;
    headers: Headers;
};

export const getPostProjectUrl = () => {
    return `https://api.getgas.io/api/v1/projects`;
};

export const postProject = async (
    project: Project,
    options?: RequestInit,
): Promise<postProjectResponse> => {
    const res = await fetch(getPostProjectUrl(), {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(project),
    });
    const data = await res.json();

    return { status: res.status, data, headers: res.headers };
};

export const getPostProjectMutationFetcher = (options?: RequestInit) => {
    return (
        _: Key,
        { arg }: { arg: Project },
    ): Promise<postProjectResponse> => {
        return postProject(arg, options);
    };
};
export const getPostProjectMutationKey = () =>
    [`https://api.getgas.io/api/v1/projects`] as const;

export type PostProjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof postProject>>
>;
export type PostProjectMutationError = Promise<
    R400Response | R401Response | R403Response | R500Response
>;

/**
 * @summary Create a project
 */
export const usePostProject = <
    TError = Promise<R400Response | R401Response | R403Response | R500Response>,
>(options?: {
    swr?: SWRMutationConfiguration<
        Awaited<ReturnType<typeof postProject>>,
        TError,
        Key,
        Project,
        Awaited<ReturnType<typeof postProject>>
    > & { swrKey?: string };
    fetch?: RequestInit;
}) => {
    const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

    const swrKey = swrOptions?.swrKey ?? getPostProjectMutationKey();
    const swrFn = getPostProjectMutationFetcher(fetchOptions);

    const query = useSWRMutation(swrKey, swrFn, swrOptions);

    return {
        swrKey,
        ...query,
    };
};
