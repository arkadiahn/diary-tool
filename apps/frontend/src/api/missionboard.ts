/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * intra API
 * Backend API for intra
The API tries to follow the [Google API Design Guide](https://google.aip.dev/general)
- to retrieve resources across multiple collections use `-`
  - /projects/-/accounts/{account} is an example for find all the projects a account is in
- to shortcut the retrieval of information for the authenticated user use `me`
  - /accounts/me is an example for get your own account

Exceptions are the following:
- filter parameters only support '=' and '!='

 * OpenAPI spec version: 0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type DeleteMissionboardProjectAccountParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type GetMissionboardProjectAccountParams = {
/**
 * If set to true will show unapproved projectaccounts
 */
show_unapproved?: boolean;
};

export type PostMissionboardProjectAccountBodyTwo = { [key: string]: unknown };

export type PostMissionboardProjectAccountParams = {
/**
 * Can only be used by admins.
If set to true will add the account without needing approval from leader.

 */
approved?: boolean;
/**
 * If set to true will add your own account and ignore body.
 */
self?: boolean;
};

export type GetMissionboardProjectAccountsParams = {
/**
 * Filter by [approved]
 */
filter?: string;
/**
 * If set to true will show unapproved projectaccounts
 */
show_unapproved?: boolean;
};

export type DeleteMissionboardProjectMilestoneParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionboardProjectMilestoneParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
milestone_id?: string;
};

export type DeleteMissionboardProjectParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionboardProjectParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
project_id?: string;
};

export type GetMissionboardProjects200 = ProjectArray | ProjectSummaryArray;

export type GetMissionboardProjectsFormat = typeof GetMissionboardProjectsFormat[keyof typeof GetMissionboardProjectsFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMissionboardProjectsFormat = {
  summary: 'summary',
  extended: 'extended',
} as const;

export type GetMissionboardProjectsParams = {
format?: GetMissionboardProjectsFormat;
/**
 * Filter by [project_state, approval_state]
 */
filter?: string;
/**
 * Order by [title, like_count]
 */
order_by?: string;
/**
 * include soft deleted resources
 */
show_deleted?: ShowDeletedParameter;
show_unapproved?: boolean;
};

export type PostAuthLogoutParams = {
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginMockScopesItem = typeof GetAuthLoginMockScopesItem[keyof typeof GetAuthLoginMockScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMockScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export type GetAuthLoginMockParams = {
scopes?: GetAuthLoginMockScopesItem[];
accountId?: string;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginMethod = typeof GetAuthLoginMethod[keyof typeof GetAuthLoginMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMethod = {
  github: 'github',
  google: 'google',
} as const;

export type GetAuthLoginParams = {
/**
 * login method
 */
method: GetAuthLoginMethod;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetCallbackGithubParams = {
/**
 * code
 */
code: string;
/**
 * state
 */
state: string;
};

export type GetAccount200 = _ | Public;

export type GetAccounts200 = AccountArray | AccountPublicArray;

/**
 * delete will return 2xx if the resource is not found
 */
export type AllowMissingParameter = boolean;

/**
 * include soft deleted resources
 */
export type ShowDeletedParameter = boolean;

/**
 * redirect url after action is completed
 */
export type RedirectUrlParameter = string;

/**
 * No Content
 */
export type R204Response = void;

/**
 * Conflict
 */
export type R409Response = void;

/**
 * Redirect
 */
export type R302Response = void;

/**
 * Not Found
 */
export type R404Response = void;

export type R400Response = {
  message: string;
};

export type R500Response = {
  message: string;
};

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export type GetMissionboardProjectResponse = ProjectArray | ProjectSummaryArray;

export type GetAccountResponse = _ | Public;

export type GetAccountsResponse = AccountArray | AccountPublicArray;

export interface ProjectAccountPost {
  account: string;
}

export interface ProjectAccount {
  account: Public;
  approved?: boolean;
  readonly name: string;
  project: string;
}

export interface ProjectMilestonePatch {
  /** @maxLength 1000 */
  description?: string;
  end_time?: string;
}

export interface ProjectMilestonePost {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
}

export type MissionboardMilestoneState = typeof MissionboardMilestoneState[keyof typeof MissionboardMilestoneState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardMilestoneState = {
  planned: 'planned',
  in_progress: 'in progress',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface ProjectMilestone {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
  readonly name: string;
  state: MissionboardMilestoneState;
}

export type EndTime = string;

export type KickoffTime = string;

export type GithubLink = string;

/**
 * @maxLength 1000
 */
export type DescriptionSkills = string;

/**
 * @maxLength 1000
 */
export type DescriptionGoal = string;

export type ProjectSummaryArray = ProjectSummary[];

/**
 * @maxLength 1000
 */
export type Description = string;

/**
 * @maxLength 255
 */
export type Title = string;

export interface ProjectPatch {
  description?: Description;
  description_goal?: DescriptionGoal;
  description_skills?: DescriptionSkills;
  github_link?: GithubLink;
  title?: Title;
}

export interface ProjectPost {
  description: Description;
  description_goal: DescriptionGoal;
  description_skills: DescriptionSkills;
  end_time?: EndTime;
  github_link: GithubLink;
  kickoff_time: KickoffTime;
  title: Title;
}

export type MissionboardProjectApprovalState = typeof MissionboardProjectApprovalState[keyof typeof MissionboardProjectApprovalState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectApprovalState = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type MissionboardProjectProjectState = typeof MissionboardProjectProjectState[keyof typeof MissionboardProjectProjectState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionboardProjectProjectState = {
  active: 'active',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface ProjectSummary {
  completed_milestones_count: number;
  description: Description;
  like_count: number;
  milestones_count: number;
  name: Name;
  project_state: MissionboardProjectProjectState;
  title: Title;
}

export interface Project {
  approval_state: MissionboardProjectApprovalState;
  create_time: string;
  delete_time?: string;
  /** @maxLength 1000 */
  description: string;
  /** @maxLength 1000 */
  description_goal: string;
  /** @maxLength 1000 */
  description_skills: string;
  end_time?: string;
  github_link: string;
  kickoff_time: string;
  leader: string;
  like_count: number;
  readonly name: string;
  project_state: MissionboardProjectProjectState;
  /** @maxLength 255 */
  title: string;
  update_time: string;
}

export type ProjectArray = Project[];

export interface Event {
  begin_time: string;
  description: string;
  end_time: string;
  link: string;
  location: string;
  name: string;
  picture_uri: string;
  title: string;
  topic: string;
}

export type SessionScopesItem = typeof SessionScopesItem[keyof typeof SessionScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export interface Session {
  email: string;
  imageURI: string;
  name: string;
  nickName: string;
  scopes: SessionScopesItem[];
}

export type Admin = boolean;

/**
 * @maxLength 255
 */
export type Email = string;

/**
 * @maxLength 1
 */
export type Emoji = string;

export type BirthDate = string;

/**
 * @maxLength 255
 */
export type FamilyName = string;

/**
 * @maxLength 255
 */
export type GivenName = string;

/**
 * @maxLength 255
 */
export type NickName = string;

export interface Patch {
  admin?: Admin;
  birth_date?: BirthDate;
  email?: Email;
  emoji?: Emoji;
  family_name?: FamilyName;
  given_name?: GivenName;
  nick_name?: NickName;
}

export type Name = string;

export interface Public {
  name: Name;
  nick_name: NickName;
}

export type AccountPublicArray = Public[];

export interface _ {
  admin: boolean;
  birth_date?: string;
  create_time: string;
  /** @maxLength 255 */
  email: string;
  /** @maxLength 1 */
  emoji: string;
  /** @maxLength 255 */
  family_name: string;
  /** @maxLength 255 */
  github_id?: string;
  /** @maxLength 255 */
  given_name: string;
  /** @maxLength 255 */
  google_id?: string;
  readonly name: string;
  /** @maxLength 255 */
  nick_name: string;
  update_time: string;
}

export type AccountArray = _[];

export type Fix3 = GetMissionboardProjectResponse;

export type Fix2 = GetAccountResponse;

export type Fix1 = GetAccountsResponse;





  /**
 * @summary Get all accounts
 */
export const getAccounts = <TData = AxiosResponse<GetAccounts200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/accounts`,options
    );
  }

/**
 * @summary Get an account
 */
export const getAccount = <TData = AxiosResponse<GetAccount200>>(
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/accounts/${account}`,options
    );
  }

/**
 * Admins can update all fields.
Users can only update their own user.
  And not admin, birth date, email fields.

 * @summary Update an account
 */
export const patchAccount = <TData = AxiosResponse<_>>(
    account: string,
    patch: Patch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8081/api/v1/accounts/${account}`,
      patch,options
    );
  }

/**
 * @summary Github OAuth2 Callback
 */
export const getCallbackGithub = <TData = AxiosResponse<unknown>>(
    params: GetCallbackGithubParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/auth/callback/github`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Login
 */
export const getAuthLogin = <TData = AxiosResponse<unknown>>(
    params: GetAuthLoginParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/auth/login`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary login
 */
export const getAuthLoginMock = <TData = AxiosResponse<void>>(
    params?: GetAuthLoginMockParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/auth/login/mock`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Logout
 */
export const postAuthLogout = <TData = AxiosResponse<void>>(
    params?: PostAuthLogoutParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/auth/logout`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get the current session
 */
export const getSession = <TData = AxiosResponse<Session>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/auth/session`,options
    );
  }

/**
 * @summary Get all events
 */
export const getEvents = <TData = AxiosResponse<Event[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/event`,options
    );
  }

/**
 * @summary Get all projects
 */
export const getMissionboardProjects = <TData = AxiosResponse<GetMissionboardProjects200>>(
    params?: GetMissionboardProjectsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create a project
 */
export const postMissionboardProject = <TData = AxiosResponse<Project>>(
    projectPost: ProjectPost,
    params?: PostMissionboardProjectParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects`,
      projectPost,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get a project
 */
export const getMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects/${project}`,options
    );
  }

/**
 * - for admins: allow update all fields
- for leader: allow update description, description_goal, description_skills, github_link
- for other users: return 403

 * @summary Update a project
 */
export const patchMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string,
    projectPatch: ProjectPatch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8081/api/v1/missionboard/projects/${project}`,
      projectPatch,options
    );
  }

/**
 * @summary Delete a project
 */
export const deleteMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string,
    params?: DeleteMissionboardProjectParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://localhost:8081/api/v1/missionboard/projects/${project}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Undelete a project
 */
export const undeleteMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}:undelete`,undefined,options
    );
  }

/**
 * @summary Reject a project
 */
export const rejectMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}:reject`,undefined,options
    );
  }

/**
 * @summary Like a project
 */
export const likeMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}:like`,undefined,options
    );
  }

/**
 * @summary Approve a project
 */
export const approveMissionboardProject = <TData = AxiosResponse<Project>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}:approve`,undefined,options
    );
  }

/**
 * @summary Get all milestones of a project
 */
export const getMissionboardProjectMilestones = <TData = AxiosResponse<ProjectMilestone[]>>(
    project: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones`,options
    );
  }

/**
 * @summary Create a milestone
 */
export const postMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    projectMilestonePost: ProjectMilestonePost,
    params?: PostMissionboardProjectMilestoneParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones`,
      projectMilestonePost,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get a milestone
 */
export const getMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones/${milestone}`,options
    );
  }

/**
 * @summary Update a milestone
 */
export const patchMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string,
    projectMilestonePatch: ProjectMilestonePatch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones/${milestone}`,
      projectMilestonePatch,options
    );
  }

/**
 * @summary Delete a milestone
 */
export const deleteMissionboardProjectMilestone = <TData = AxiosResponse<R204Response>>(
    project: string,
    milestone: string,
    params?: DeleteMissionboardProjectMilestoneParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones/${milestone}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Complete a milestone
 */
export const completeMissionboardProjectMilestone = <TData = AxiosResponse<ProjectMilestone>>(
    project: string,
    milestone: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/milestones/${milestone}:complete`,undefined,options
    );
  }

/**
 * @summary Get all accounts in a project
 */
export const getMissionboardProjectAccounts = <TData = AxiosResponse<ProjectAccount[]>>(
    project: string,
    params?: GetMissionboardProjectAccountsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Request to join a project
- For admins: allow add any account
- For self: allow add your own account

 * @summary Join a project
 */
export const postMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount | R204Response>>(
    project: string,
    postMissionboardProjectAccountBody?: ProjectAccountPost | PostMissionboardProjectAccountBodyTwo,
    params?: PostMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts`,
      postMissionboardProjectAccountBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get an account in a project
 */
export const getMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount[]>>(
    project: string,
    account: string,
    params?: GetMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts/${account}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Remove an account from a project
 */
export const deleteMissionboardProjectAccount = <TData = AxiosResponse<R204Response>>(
    project: string,
    account: string,
    params?: DeleteMissionboardProjectAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts/${account}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Reject a join request
 */
export const rejectMissionboardProjectAccount = <TData = AxiosResponse<R204Response>>(
    project: string,
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts/${account}:reject`,undefined,options
    );
  }

/**
 * @summary Approve a join request
 */
export const approveMissionboardProjectAccount = <TData = AxiosResponse<ProjectAccount>>(
    project: string,
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8081/api/v1/missionboard/projects/${project}/accounts/${account}:approve`,undefined,options
    );
  }

export type GetAccountsResult = AxiosResponse<GetAccounts200>
export type GetAccountResult = AxiosResponse<GetAccount200>
export type PatchAccountResult = AxiosResponse<_>
export type GetCallbackGithubResult = AxiosResponse<unknown>
export type GetAuthLoginResult = AxiosResponse<unknown>
export type GetAuthLoginMockResult = AxiosResponse<void>
export type PostAuthLogoutResult = AxiosResponse<void>
export type GetSessionResult = AxiosResponse<Session>
export type GetEventsResult = AxiosResponse<Event[]>
export type GetMissionboardProjectsResult = AxiosResponse<GetMissionboardProjects200>
export type PostMissionboardProjectResult = AxiosResponse<Project>
export type GetMissionboardProjectResult = AxiosResponse<Project>
export type PatchMissionboardProjectResult = AxiosResponse<Project>
export type DeleteMissionboardProjectResult = AxiosResponse<Project>
export type UndeleteMissionboardProjectResult = AxiosResponse<Project>
export type RejectMissionboardProjectResult = AxiosResponse<Project>
export type LikeMissionboardProjectResult = AxiosResponse<Project>
export type ApproveMissionboardProjectResult = AxiosResponse<Project>
export type GetMissionboardProjectMilestonesResult = AxiosResponse<ProjectMilestone[]>
export type PostMissionboardProjectMilestoneResult = AxiosResponse<ProjectMilestone>
export type GetMissionboardProjectMilestoneResult = AxiosResponse<ProjectMilestone>
export type PatchMissionboardProjectMilestoneResult = AxiosResponse<ProjectMilestone>
export type DeleteMissionboardProjectMilestoneResult = AxiosResponse<R204Response>
export type CompleteMissionboardProjectMilestoneResult = AxiosResponse<ProjectMilestone>
export type GetMissionboardProjectAccountsResult = AxiosResponse<ProjectAccount[]>
export type PostMissionboardProjectAccountResult = AxiosResponse<ProjectAccount | R204Response>
export type GetMissionboardProjectAccountResult = AxiosResponse<ProjectAccount[]>
export type DeleteMissionboardProjectAccountResult = AxiosResponse<R204Response>
export type RejectMissionboardProjectAccountResult = AxiosResponse<R204Response>
export type ApproveMissionboardProjectAccountResult = AxiosResponse<ProjectAccount>
