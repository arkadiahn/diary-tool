/**
 * Generated by orval v7.0.0 üç∫
 * Do not edit manually.
 * intra API
 * Backend API for intra
The API tries to follow the [Google API Design Guide](https://google.aip.dev/general)
- to retrieve resources across multiple collections use `-`
  - /missions/-/accounts/{account} is an example for find all the missions a account is in
- to shortcut the retrieval of information for the authenticated user use `me`
  - /accounts/me is an example for get your own account

Exceptions are the following:
- filter parameters only support '=' and '!='

 * OpenAPI spec version: 0.1
 */
import { customAxios } from './customAxios';
export type UploadFile200 = {
  fileId: string;
  fileUrl?: string;
};

export type UploadFileBody = {
  file?: Blob;
};

export type UploadFileBucketName = typeof UploadFileBucketName[keyof typeof UploadFileBucketName];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UploadFileBucketName = {
  public: 'public',
} as const;

export type UploadFileParams = {
/**
 * The name of the bucket to upload the file to
 */
bucketName: UploadFileBucketName;
};

export type DeleteMissionAccountParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type GetMissionAccountParams = {
/**
 * If set to true will show unapproved missionaccounts
 */
show_unapproved?: boolean;
};

export type PostMissionAccountBodyTwo = { [key: string]: unknown };

export type PostMissionAccountParams = {
/**
 * Can only be used by admins.
If set to true will add the account without needing approval from leader.

 */
approved?: boolean;
/**
 * If set to true will add your own account and ignore body.
 */
self?: boolean;
};

export type GetMissionAccountsParams = {
/**
 * Filter by [approved]
 */
filter?: string;
/**
 * If set to true will show unapproved missionaccounts
 */
show_unapproved?: boolean;
};

export type DeleteMissionMilestoneParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionMilestoneParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
milestone_id?: string;
};

export type DeleteMissionParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type PostMissionParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
mission_id?: string;
};

export type GetMissionsFormat = typeof GetMissionsFormat[keyof typeof GetMissionsFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMissionsFormat = {
  summary: 'summary',
  extended: 'extended',
} as const;

export type GetMissionsParams = {
format?: GetMissionsFormat;
/**
 * Filter by [mission_state, approval_state]
 */
filter?: string;
/**
 * Order by [title, like_count]
 */
order_by?: string;
/**
 * include soft deleted resources
 */
show_deleted?: ShowDeletedParameter;
show_unapproved?: boolean;
};

export type GetAuthLogoutParams = {
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginMockScopesItem = typeof GetAuthLoginMockScopesItem[keyof typeof GetAuthLoginMockScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginMockScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export type GetAuthLoginMockParams = {
scopes?: GetAuthLoginMockScopesItem[];
accountId?: string;
/**
 * If true, the account will automatically be get user scope
 */
registrationCompleted?: boolean;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetAuthLoginProvider = typeof GetAuthLoginProvider[keyof typeof GetAuthLoginProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthLoginProvider = {
  github: 'github',
  google: 'google',
} as const;

export type GetAuthLoginParams = {
/**
 * login provider
 */
provider: GetAuthLoginProvider;
/**
 * redirect url after action is completed
 */
redirect?: RedirectUrlParameter;
};

export type GetCallbackParams = {
/**
 * code
 */
code: string;
/**
 * state
 */
state: string;
};

export type GetAccounts200 = {
  accounts: GetAccountsResponse;
  next_page_token: string;
};

export type GetAccountsParams = {
/**
 * The maximum number to return. May return fewer than this value.
If unspecified (or specifies 0), a defualt is chosen.

 */
page_size?: PageSizeParameter;
/**
 * A page token, received from a previous call.
Provide this to retrieve the subsequent page.
When paginating, all other parameters provided must match
the call that provided the page token.

 */
page_token?: PageTokenParameter;
};

/**
 * delete will return 2xx if the resource is not found
 */
export type AllowMissingParameter = boolean;

/**
 * include soft deleted resources
 */
export type ShowDeletedParameter = boolean;

/**
 * redirect url after action is completed
 */
export type RedirectUrlParameter = string;

/**
 * A page token, received from a previous call.
Provide this to retrieve the subsequent page.
When paginating, all other parameters provided must match
the call that provided the page token.

 */
export type PageTokenParameter = string;

/**
 * The maximum number to return. May return fewer than this value.
If unspecified (or specifies 0), a defualt is chosen.

 */
export type PageSizeParameter = number;

/**
 * No Content
 */
export type R204Response = void;

/**
 * Conflict
 */
export type R409Response = void;

/**
 * Redirect
 */
export type R302Response = void;

/**
 * Not Found
 */
export type R404Response = void;

export type R400Response = {
  message: string;
};

export type R500Response = {
  message: string;
};

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export interface MissionAccountPost {
  account: string;
}

export interface MissionAccount {
  account: AccountPublic;
  approved?: boolean;
  mission: string;
  readonly name: string;
}

export interface MissionMilestonePatch {
  /** @maxLength 1000 */
  description?: string;
  end_time?: string;
}

export interface MissionMilestonePost {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
}

export type MissionMilestoneState = typeof MissionMilestoneState[keyof typeof MissionMilestoneState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionMilestoneState = {
  planned: 'planned',
  in_progress: 'in progress',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface MissionMilestone {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
  readonly name: string;
  state: MissionMilestoneState;
}

export interface MissionPatch {
  description?: Description;
  description_goal?: DescriptionGoal;
  description_skills?: DescriptionSkills;
  github_link?: GithubLink;
  title?: Title;
}

export type EndTime = string;

export type KickoffTime = string;

export type GithubLink = string;

/**
 * @maxLength 1000
 */
export type DescriptionSkills = string;

/**
 * @maxLength 1000
 */
export type DescriptionGoal = string;

export interface MissionPost {
  description: Description;
  description_goal: DescriptionGoal;
  description_skills: DescriptionSkills;
  end_time?: EndTime;
  github_link: GithubLink;
  kickoff_time: KickoffTime;
  title: Title;
}

export type GetMissionResponse = MissionArray | MissionSummaryArray;

/**
 * @maxLength 1000
 */
export type Description = string;

/**
 * @maxLength 255
 */
export type Title = string;

export interface MissionSummary {
  account_count: number;
  completed_milestones_count: number;
  description: Description;
  like_count: number;
  milestones_count: number;
  mission_state: MissionMissionState;
  name: Name;
  title: Title;
}

export type MissionSummaryArray = MissionSummary[];

export type MissionApprovalState = typeof MissionApprovalState[keyof typeof MissionApprovalState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionApprovalState = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type MissionMissionState = typeof MissionMissionState[keyof typeof MissionMissionState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionMissionState = {
  active: 'active',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface Mission {
  approval_state: MissionApprovalState;
  create_time: string;
  delete_time?: string;
  /** @maxLength 1000 */
  description: string;
  /** @maxLength 1000 */
  description_goal: string;
  /** @maxLength 1000 */
  description_skills: string;
  end_time?: string;
  github_link: string;
  kickoff_time: string;
  leader: string;
  like_count: number;
  mission_state: MissionMissionState;
  readonly name: string;
  /** @maxLength 255 */
  title: string;
  update_time: string;
}

export type MissionArray = Mission[];

export interface Event {
  begin_time: string;
  description: string;
  end_time: string;
  link: string;
  location: string;
  name: string;
  picture_uri: string;
  title: string;
  topic: string;
}

export type AuthSessionScopesItem = typeof AuthSessionScopesItem[keyof typeof AuthSessionScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthSessionScopesItem = {
  user: 'user',
  admin: 'admin',
} as const;

export interface AuthSession {
  email: string;
  imageURI: string;
  name: string;
  nickName: string;
  scopes: AuthSessionScopesItem[];
}

export interface DiaryPatch {
  goals: DiaryGoal[];
}

export type DiaryPostGoalsItem = {
  title: string;
};

/**
 * The user's obstacles for the project
 */
export type Obstacles = string;

/**
 * The user's learnings from the project
 */
export type Learnings = string;

/**
 * The user's motivation for the project
 */
export type Motivation = number;

/**
 * The number of weeks until the project is completed
 */
export type WeeksTillCompletion = number;

/**
 * The project the user is working on
 */
export type Project = string;

/**
 * The date of the start of the week on which the diary entry is based
 */
export type EntryDate = string;

export interface DiaryPost {
  entry_date: EntryDate;
  goals: DiaryPostGoalsItem[];
  learnings: Learnings;
  motivation: Motivation;
  obstacles: Obstacles;
  project: Project;
  weeks_till_completion: WeeksTillCompletion;
}

export interface DiaryGoal {
  completed: boolean;
  title: string;
}

export interface Diary {
  account_id: string;
  /** The time the diary entry was created */
  create_time: string;
  /** The date of the start of the week on which the diary entry is based */
  entry_date: string;
  goals: DiaryGoal[];
  /** The user's learnings from the project */
  learnings: string;
  /** The user's motivation for the project */
  motivation: number;
  name: string;
  /** The user's obstacles for the project */
  obstacles: string;
  /** The project the user is working on */
  project: string;
  /** The time the diary entry was last updated */
  update_time: string;
  /** The number of weeks until the project is completed */
  weeks_till_completion: number;
}

export type AcceptedNewsletter = boolean;

export type AcceptedTermsOfService = boolean;

export type AcceptedPrivacyPolicy = boolean;

export type Admin = boolean;

/**
 * @maxLength 1
 */
export type Emoji = string;

export type BirthDate = string;

/**
 * @maxLength 255
 */
export type FamilyName = string;

/**
 * @maxLength 255
 */
export type GivenName = string;

export interface AccountPatch {
  accepted_newsletter?: AcceptedNewsletter;
  accepted_privacy_policy?: AcceptedPrivacyPolicy;
  accepted_terms_of_service?: AcceptedTermsOfService;
  admin?: Admin;
  birth_date?: BirthDate;
  email?: Email;
  emoji?: Emoji;
  family_name?: FamilyName;
  given_name?: GivenName;
  nick_name?: NickName;
}

export type GetAccountsResponse = AccountArray | AccountPublicArray;

/**
 * @maxLength 255
 */
export type Email = string;

/**
 * @maxLength 255
 */
export type NickName = string;

export type Name = string;

export interface AccountPublic {
  email?: Email;
  name: Name;
  nick_name: NickName;
}

export type AccountPublicArray = AccountPublic[];

export interface Account {
  accepted_newsletter: boolean;
  accepted_privacy_policy: boolean;
  accepted_terms_of_service: boolean;
  admin: boolean;
  birth_date?: string;
  completed_registration: boolean;
  create_time: string;
  /** @maxLength 255 */
  email: string;
  /** @maxLength 1 */
  emoji: string;
  /** @maxLength 255 */
  family_name: string;
  /** @maxLength 255 */
  github_id?: string;
  /** @maxLength 255 */
  given_name: string;
  /** @maxLength 255 */
  google_id?: string;
  readonly name: string;
  /** @maxLength 255 */
  nick_name: string;
  update_time: string;
}

export type GetAccountResponse = Account | AccountPublic;

export type AccountArray = Account[];




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * Pagination not supported for now!
Returns a list of accounts.
default page size 30.
max page size 1000.

 * @summary Get all accounts
 */
export const getAccounts = (
    params?: GetAccountsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccounts200>(
      {url: `/accounts`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get an account
 */
export const getAccount = (
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccountResponse>(
      {url: `/accounts/${account}`, method: 'GET'
    },
      options);
    }
  
/**
 * Admins can update all fields.
Users can only update their own user.
  And not admin, birth date, email fields.

 * @summary Update an account
 */
export const patchAccount = (
    account: string,
    accountPatch: AccountPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Account>(
      {url: `/accounts/${account}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: accountPatch
    },
      options);
    }
  
/**
 * @summary Get all diaries
 */
export const getDiaries = (
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary[]>(
      {url: `/accounts/${account}/diaries`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a diary
 */
export const createDiary = (
    account: string,
    diaryPost: DiaryPost,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: diaryPost
    },
      options);
    }
  
/**
 * @summary Get a diary entry
 */
export const getDiary = (
    account: string,
    diary: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries/${diary}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a diary
 */
export const updateDiary = (
    account: string,
    diary: string,
    diaryPatch?: DiaryPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries/${diary}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: diaryPatch
    },
      options);
    }
  
/**
 * @summary OAuth2 Callback
 */
export const getCallback = (
    params: GetCallbackParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/callback`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Will always return a 302 redirect.
In case of error, the following query parameters will be added to the ERROR_REDIRECT_URL:
- status: the error status code
- message: the error message
If the login is not completed (usually happens on first login) will redirect to COMPLETE_AUTH_REDIRECT_URL

 * @summary Redirects the user to the OAuth provider's authorization URL
 */
export const getAuthLogin = (
    params: GetAuthLoginParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/login`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary login
 */
export const getAuthLoginMock = (
    params?: GetAuthLoginMockParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/login/mock`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Will succeed even if the user is not logged in.
Will always return a 302 redirect.
In case of error, the following query parameters will be added to the redirect URL:
- status: the error status code
- message: the error message

 * @summary Logout the user / clear the session
 */
export const getAuthLogout = (
    params?: GetAuthLogoutParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<unknown>(
      {url: `/auth/logout`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get the current session
 */
export const getSession = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<AuthSession>(
      {url: `/auth/session`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all events
 */
export const getEvents = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event[]>(
      {url: `/events`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all missions
 */
export const getMissions = (
    params?: GetMissionsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetMissionResponse>(
      {url: `/missions`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create a mission
 */
export const postMission = (
    missionPost: MissionPost,
    params?: PostMissionParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionPost,
        params
    },
      options);
    }
  
/**
 * @summary Get a mission
 */
export const getMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'GET'
    },
      options);
    }
  
/**
 * - for admins: allow update all fields
- for leader: allow update description, description_goal, description_skills, github_link
- for other users: return 403

 * @summary Update a mission
 */
export const patchMission = (
    mission: string,
    missionPatch: MissionPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: missionPatch
    },
      options);
    }
  
/**
 * @summary Delete a mission
 */
export const deleteMission = (
    mission: string,
    params?: DeleteMissionParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Undelete a mission
 */
export const undeleteMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:undelete`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Reject a mission
 */
export const rejectMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Like a mission
 */
export const likeMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:like`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a mission
 */
export const approveMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:approve`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get all milestones of a mission
 */
export const getMissionMilestones = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone[]>(
      {url: `/missions/${mission}/milestones`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a milestone
 */
export const postMissionMilestone = (
    mission: string,
    missionMilestonePost: MissionMilestonePost,
    params?: PostMissionMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionMilestonePost,
        params
    },
      options);
    }
  
/**
 * @summary Get a milestone
 */
export const getMissionMilestone = (
    mission: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a milestone
 */
export const patchMissionMilestone = (
    mission: string,
    milestone: string,
    missionMilestonePatch: MissionMilestonePatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: missionMilestonePatch
    },
      options);
    }
  
/**
 * @summary Delete a milestone
 */
export const deleteMissionMilestone = (
    mission: string,
    milestone: string,
    params?: DeleteMissionMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Complete a milestone
 */
export const completeMissionMilestone = (
    mission: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}:complete`, method: 'POST'
    },
      options);
    }
  
/**
 * The leader will be able to see emails.

 * @summary Get all accounts in a mission
 */
export const getMissionAccounts = (
    mission: string,
    params?: GetMissionAccountsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount[]>(
      {url: `/missions/${mission}/accounts`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Request to join a mission
- For admins: allow add any account
- For self: allow add your own account

 * @summary Join a mission
 */
export const postMissionAccount = (
    mission: string,
    postMissionAccountBody?: MissionAccountPost | PostMissionAccountBodyTwo,
    params?: PostMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount | R204Response>(
      {url: `/missions/${mission}/accounts`, method: 'POST',
      data: postMissionAccountBody,
        params
    },
      options);
    }
  
/**
 * @summary Get an account in a mission
 */
export const getMissionAccount = (
    mission: string,
    account: string,
    params?: GetMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount[]>(
      {url: `/missions/${mission}/accounts/${account}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Remove an account from a mission
 */
export const deleteMissionAccount = (
    mission: string,
    account: string,
    params?: DeleteMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/accounts/${account}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Reject a join request
 */
export const rejectMissionAccount = (
    mission: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/accounts/${account}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a join request
 */
export const approveMissionAccount = (
    mission: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount>(
      {url: `/missions/${mission}/accounts/${account}:approve`, method: 'POST'
    },
      options);
    }
  
/**
 * Endpoint to upload a file
 * @summary Upload a file
 */
export const uploadFile = (
    uploadFileBody: UploadFileBody,
    params: UploadFileParams,
 options?: SecondParameter<typeof customAxios>,) => {const formData = new FormData();
if(uploadFileBody.file !== undefined) {
 formData.append('file', uploadFileBody.file)
 }

      return customAxios<UploadFile200>(
      {url: `/files`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      options);
    }
  
export type GetAccountsResult = NonNullable<Awaited<ReturnType<typeof getAccounts>>>
export type GetAccountResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>
export type PatchAccountResult = NonNullable<Awaited<ReturnType<typeof patchAccount>>>
export type GetDiariesResult = NonNullable<Awaited<ReturnType<typeof getDiaries>>>
export type CreateDiaryResult = NonNullable<Awaited<ReturnType<typeof createDiary>>>
export type GetDiaryResult = NonNullable<Awaited<ReturnType<typeof getDiary>>>
export type UpdateDiaryResult = NonNullable<Awaited<ReturnType<typeof updateDiary>>>
export type GetCallbackResult = NonNullable<Awaited<ReturnType<typeof getCallback>>>
export type GetAuthLoginResult = NonNullable<Awaited<ReturnType<typeof getAuthLogin>>>
export type GetAuthLoginMockResult = NonNullable<Awaited<ReturnType<typeof getAuthLoginMock>>>
export type GetAuthLogoutResult = NonNullable<Awaited<ReturnType<typeof getAuthLogout>>>
export type GetSessionResult = NonNullable<Awaited<ReturnType<typeof getSession>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetMissionsResult = NonNullable<Awaited<ReturnType<typeof getMissions>>>
export type PostMissionResult = NonNullable<Awaited<ReturnType<typeof postMission>>>
export type GetMissionResult = NonNullable<Awaited<ReturnType<typeof getMission>>>
export type PatchMissionResult = NonNullable<Awaited<ReturnType<typeof patchMission>>>
export type DeleteMissionResult = NonNullable<Awaited<ReturnType<typeof deleteMission>>>
export type UndeleteMissionResult = NonNullable<Awaited<ReturnType<typeof undeleteMission>>>
export type RejectMissionResult = NonNullable<Awaited<ReturnType<typeof rejectMission>>>
export type LikeMissionResult = NonNullable<Awaited<ReturnType<typeof likeMission>>>
export type ApproveMissionResult = NonNullable<Awaited<ReturnType<typeof approveMission>>>
export type GetMissionMilestonesResult = NonNullable<Awaited<ReturnType<typeof getMissionMilestones>>>
export type PostMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof postMissionMilestone>>>
export type GetMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof getMissionMilestone>>>
export type PatchMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof patchMissionMilestone>>>
export type DeleteMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof deleteMissionMilestone>>>
export type CompleteMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof completeMissionMilestone>>>
export type GetMissionAccountsResult = NonNullable<Awaited<ReturnType<typeof getMissionAccounts>>>
export type PostMissionAccountResult = NonNullable<Awaited<ReturnType<typeof postMissionAccount>>>
export type GetMissionAccountResult = NonNullable<Awaited<ReturnType<typeof getMissionAccount>>>
export type DeleteMissionAccountResult = NonNullable<Awaited<ReturnType<typeof deleteMissionAccount>>>
export type RejectMissionAccountResult = NonNullable<Awaited<ReturnType<typeof rejectMissionAccount>>>
export type ApproveMissionAccountResult = NonNullable<Awaited<ReturnType<typeof approveMissionAccount>>>
export type UploadFileResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
