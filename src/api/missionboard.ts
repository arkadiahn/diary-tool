/**
 * Generated by orval v7.0.0 üç∫
 * Do not edit manually.
 * intra API
 * Backend API for intra
The API tries to follow the [Google API Design Guide](https://google.aip.dev/general)
- to retrieve resources across multiple collections use `-`
  - /missions/-/accounts/{account} is an example for find all the missions a account is in
- to shortcut the retrieval of information for the authenticated user use `me`
  - /accounts/me is an example for get your own account

Exceptions are the following:
- filter parameters only support '=' and '!='

Auth endpoints:
- [Account](https://keycloak-service-production.up.railway.app/realms/os/account)
- [Login](https://oauth2-proxy-development.up.railway.app/oauth2/sign_in)
- [Login with redirect](https://oauth2-proxy-development.up.railway.app/oauth2/sign_in?rd=http://www.google.de)
  - rd need to be whitelisted
- [Logout](https://oauth2-proxy-development.up.railway.app/oauth2/sign_out)

logout keycloak:
- [keycloak logout](https://keycloak-service-production.up.railway.app/realms/os/protocol/openid-connect/logout/logout-confirm)

Other auth endpoints:
- https://oauth2-proxy.github.io/oauth2-proxy/features/endpoints/

 * OpenAPI spec version: 0.1
 */
import { customAxios } from './customAxios';
export type UploadFile200 = {
  fileId: string;
  fileUrl?: string;
};

export type UploadFileBody = {
  file?: Blob;
};

export type UploadFileBucketName = typeof UploadFileBucketName[keyof typeof UploadFileBucketName];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UploadFileBucketName = {
  public: 'public',
} as const;

export type UploadFileParams = {
/**
 * The name of the bucket to upload the file to
 */
bucketName: UploadFileBucketName;
};

export type DeleteMissionAccountParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type GetMissionAccountParams = {
/**
 * If set to true will show unapproved missionaccounts
 */
show_unapproved?: boolean;
};

export type PostMissionAccountParams = {
/**
 * Can only be used by admins.
If set to true will add the account without needing approval from leader.

 */
approved?: boolean;
/**
 * If set to true will add your own account and ignore body.
 */
self?: boolean;
};

export type GetMissionAccountsParams = {
/**
 * Filter by [approved]
 */
filter?: string;
/**
 * If set to true will show unapproved missionaccounts
 */
show_unapproved?: boolean;
};

export type PostMissionMilestoneParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
milestone_id?: string;
};

export type PostMissionParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
mission_id?: string;
};

export type GetMissionsFormat = typeof GetMissionsFormat[keyof typeof GetMissionsFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMissionsFormat = {
  summary: 'summary',
  extended: 'extended',
} as const;

export type PostEventParams = {
/**
 * 4-63 valid characters: /[a-z][0-9]-/
 */
event_id?: string;
};

export type DeleteDiaryParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type GetAccounts200 = {
  accounts: GetAccountsResponse;
  next_page_token: string;
};

/**
 * include soft deleted resources
 */
export type ShowDeletedParameter = boolean;

export type GetMissionsParams = {
format?: GetMissionsFormat;
/**
 * Filter by [mission_state, approval_state]
 */
filter?: string;
/**
 * Order by [title, like_count]
 */
order_by?: string;
/**
 * include soft deleted resources
 */
show_deleted?: ShowDeletedParameter;
show_unapproved?: boolean;
};

/**
 * delete will return 2xx if the resource is not found
 */
export type AllowMissingParameter = boolean;

export type DeleteMissionMilestoneParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

export type DeleteMissionParams = {
/**
 * delete will return 2xx if the resource is not found
 */
allow_missing?: AllowMissingParameter;
};

/**
 * A page token, received from a previous call.
Provide this to retrieve the subsequent page.
When paginating, all other parameters provided must match
the call that provided the page token.

 */
export type PageTokenParameter = string;

/**
 * The maximum number to return. May return fewer than this value.
If unspecified (or specifies 0), a defualt is chosen.

 */
export type PageSizeParameter = number;

export type GetAccountsParams = {
/**
 * The maximum number to return. May return fewer than this value.
If unspecified (or specifies 0), a defualt is chosen.

 */
page_size?: PageSizeParameter;
/**
 * A page token, received from a previous call.
Provide this to retrieve the subsequent page.
When paginating, all other parameters provided must match
the call that provided the page token.

 */
page_token?: PageTokenParameter;
};

/**
 * Conflict
 */
export type R409Response = void;

/**
 * No Content
 */
export type R204Response = void;

/**
 * Not Found
 */
export type R404Response = void;

export type R400Response = {
  message: string;
};

export type R500Response = {
  message: string;
};

/**
 * Forbidden
 */
export type R403Response = void;

/**
 * Unauthorized
 */
export type R401Response = void;

export interface MissionAccountPost {
  account: string;
}

export interface MissionAccount {
  account: AccountPublic;
  approved?: boolean;
  mission: string;
  readonly name: string;
}

export interface MissionMilestonePatch {
  completed?: boolean;
  /** @maxLength 1000 */
  description?: string;
  end_time?: string;
}

export interface MissionMilestonePost {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
}

export type MissionMilestoneState = typeof MissionMilestoneState[keyof typeof MissionMilestoneState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionMilestoneState = {
  planned: 'planned',
  in_progress: 'in progress',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface MissionMilestone {
  /** @maxLength 1000 */
  description: string;
  end_time: string;
  readonly name: string;
  state: MissionMilestoneState;
}

export type PropertiesEndTime = string;

export type KickoffTime = string;

export type GithubLink = string;

/**
 * @maxLength 1000
 */
export type DescriptionSkills = string;

/**
 * @maxLength 1000
 */
export type DescriptionGoal = string;

export interface MissionPatch {
  description?: PropertiesDescription;
  description_goal?: DescriptionGoal;
  description_skills?: DescriptionSkills;
  github_link?: GithubLink;
  title?: PropertiesTitle;
}

export interface MissionPost {
  description: PropertiesDescription;
  description_goal: DescriptionGoal;
  description_skills: DescriptionSkills;
  end_time?: PropertiesEndTime;
  github_link: GithubLink;
  kickoff_time: KickoffTime;
  title: PropertiesTitle;
}

export type GetMissionResponse = MissionArray | MissionSummaryArray;

/**
 * @maxLength 1000
 */
export type PropertiesDescription = string;

/**
 * @maxLength 255
 */
export type PropertiesTitle = string;

export type PropertiesName = string;

export type MissionApprovalState = typeof MissionApprovalState[keyof typeof MissionApprovalState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionApprovalState = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type MissionMissionState = typeof MissionMissionState[keyof typeof MissionMissionState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionMissionState = {
  active: 'active',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface MissionSummary {
  account_count: number;
  approval_state: MissionApprovalState;
  completed_milestones_count: number;
  description: PropertiesDescription;
  like_count: number;
  milestones_count: number;
  mission_state: MissionMissionState;
  name: PropertiesName;
  title: PropertiesTitle;
}

export type MissionSummaryArray = MissionSummary[];

export interface Mission {
  approval_state: MissionApprovalState;
  create_time: string;
  delete_time?: string;
  /** @maxLength 1000 */
  description: string;
  /** @maxLength 1000 */
  description_goal: string;
  /** @maxLength 1000 */
  description_skills: string;
  end_time?: string;
  github_link: string;
  kickoff_time: string;
  leader: string;
  like_count: number;
  mission_state: MissionMissionState;
  readonly name: string;
  /** @maxLength 255 */
  title: string;
  update_time: string;
}

export type MissionArray = Mission[];

export type EndTime = string;

export type BeginTime = string;

export type Location = string;

export type Description = string;

export type Link = string;

export type PictureUri = string;

export type Topic = string;

export type Title = string;

export interface EventPatch {
  begin_time?: BeginTime;
  description?: Description;
  end_time?: EndTime;
  link?: Link;
  location?: Location;
  picture_uri?: PictureUri;
  title?: Title;
  topic?: Topic;
}

export interface EventPost {
  begin_time: BeginTime;
  description: Description;
  end_time: EndTime;
  link: Link;
  location: Location;
  picture_uri: PictureUri;
  title: Title;
  topic: Topic;
}

export interface Event {
  begin_time: string;
  description: string;
  end_time: string;
  link: string;
  location: string;
  name: string;
  picture_uri: string;
  title: string;
  topic: string;
}

export type Goals = DiaryGoal[];

/**
 * The user's obstacles for the project
 */
export type Obstacles = string;

/**
 * The user's learnings from the project
 */
export type Learnings = string;

/**
 * The user's motivation for the project
 */
export type Motivation = number;

/**
 * The number of weeks until the project is completed
 */
export type CompletionWeeks = number;

/**
 * The project the user is working on
 */
export type Project = string;

export interface DiaryPatch {
  completion_weeks?: CompletionWeeks;
  goals?: Goals;
  learnings?: Learnings;
  motivation?: Motivation;
  obstacles?: Obstacles;
  project?: Project;
}

/**
 * The date of the start of the week on which the diary entry is based
 */
export type EntryDate = string;

export interface DiaryPost {
  completion_weeks: CompletionWeeks;
  entry_date: EntryDate;
  goals: Goals;
  learnings: Learnings;
  motivation: Motivation;
  obstacles: Obstacles;
  project: Project;
}

export interface DiaryGoal {
  completed: boolean;
  title: string;
}

export interface Diary {
  account_id: string;
  /** The number of weeks until the project is completed */
  completion_weeks: number;
  /** The time the diary entry was created */
  create_time: string;
  /** Whether the currently used access token can edit / delete the diary entry */
  editable_diary: boolean;
  /** Whether the currently used access token can edit the goals */
  editable_goal_completion: boolean;
  /** The date of the start of the week on which the diary entry is based */
  entry_date: string;
  goals: DiaryGoal[];
  /** The user's learnings from the project */
  learnings: string;
  /** The user's motivation for the project */
  motivation: number;
  name: string;
  /** The user's obstacles for the project */
  obstacles: string;
  /** The project the user is working on */
  project: string;
  /** The time the diary entry was last updated */
  update_time: string;
}

export type GetAccountResponse = Account | AccountPublic;

export type GetAccountsResponse = AccountArray | AccountPublicArray;

/**
 * @maxLength 255
 */
export type Email = string;

/**
 * @maxLength 255
 */
export type Nick = string;

export type Name = string;

export interface AccountUpdate {
  email: Email;
  name: Name;
  nick: Nick;
}

export interface AccountPublic {
  email?: Email;
  name: Name;
  nick: Nick;
}

export type AccountPublicArray = AccountPublic[];

export interface Account {
  create_time: string;
  delete_time?: string;
  /** @maxLength 255 */
  email: string;
  last_login_time: string;
  name: string;
  /** @maxLength 255 */
  nick: string;
  purge_time?: string;
  update_time: string;
}

export type AccountArray = Account[];




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getHealth = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<void>(
      {url: `/health`, method: 'GET'
    },
      options);
    }
  
/**
 * Pagination not supported for now!
Returns a list of accounts.
default page size 30.
max page size 1000.

 * @summary Get all accounts
 */
export const getAccounts = (
    params?: GetAccountsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccounts200>(
      {url: `/accounts`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create or update an account from jwt
 */
export const putAccount = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Account>(
      {url: `/accounts`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Batch update accounts
 */
export const batchUpdateAccounts = (
    accountUpdate: AccountUpdate[],
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Account[]>(
      {url: `/accounts:batchUpdate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: accountUpdate
    },
      options);
    }
  
/**
 * @summary Get an account
 */
export const getAccount = (
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetAccountResponse>(
      {url: `/accounts/${account}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all diaries
 */
export const getDiaries = (
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary[]>(
      {url: `/accounts/${account}/diaries`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a diary
 */
export const createDiary = (
    account: string,
    diaryPost: DiaryPost,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: diaryPost
    },
      options);
    }
  
/**
 * @summary Get a diary entry
 */
export const getDiary = (
    account: string,
    diary: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries/${diary}`, method: 'GET'
    },
      options);
    }
  
/**
 * The user can update the diary entry for this week with a grace period of +- 1 day.
Within a period of 2 weeks the user can also update the completion status of the goals.

 * @summary Update a diary
 */
export const updateDiary = (
    account: string,
    diary: string,
    diaryPatch?: DiaryPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Diary>(
      {url: `/accounts/${account}/diaries/${diary}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: diaryPatch
    },
      options);
    }
  
/**
 * @summary Delete a diary
 */
export const deleteDiary = (
    account: string,
    diary: string,
    params?: DeleteDiaryParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/accounts/${account}/diaries/${diary}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Get all events
 */
export const getEvents = (
    
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event[]>(
      {url: `/events`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create an event
 */
export const postEvent = (
    eventPost: EventPost,
    params?: PostEventParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event>(
      {url: `/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventPost,
        params
    },
      options);
    }
  
/**
 * @summary Get an event
 */
export const getEvent = (
    event: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event>(
      {url: `/events/${event}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update an event
 */
export const patchEvent = (
    event: string,
    eventPatch: EventPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Event>(
      {url: `/events/${event}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: eventPatch
    },
      options);
    }
  
/**
 * @summary Delete an event
 */
export const deleteEvent = (
    event: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/events/${event}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Get all missions
 */
export const getMissions = (
    params?: GetMissionsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<GetMissionResponse>(
      {url: `/missions`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create a mission
 */
export const postMission = (
    missionPost: MissionPost,
    params?: PostMissionParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionPost,
        params
    },
      options);
    }
  
/**
 * @summary Get a mission
 */
export const getMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'GET'
    },
      options);
    }
  
/**
 * - for admins: allow update all fields
- for leader: allow update description, description_goal, description_skills, github_link
- for other users: return 403

 * @summary Update a mission
 */
export const patchMission = (
    mission: string,
    missionPatch: MissionPatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: missionPatch
    },
      options);
    }
  
/**
 * @summary Delete a mission
 */
export const deleteMission = (
    mission: string,
    params?: DeleteMissionParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Undelete a mission
 */
export const undeleteMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:undelete`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Reject a mission
 */
export const rejectMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Like a mission
 */
export const likeMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:like`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a mission
 */
export const approveMission = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<Mission>(
      {url: `/missions/${mission}:approve`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get all milestones of a mission
 */
export const getMissionMilestones = (
    mission: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone[]>(
      {url: `/missions/${mission}/milestones`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a milestone
 */
export const postMissionMilestone = (
    mission: string,
    missionMilestonePost: MissionMilestonePost,
    params?: PostMissionMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionMilestonePost,
        params
    },
      options);
    }
  
/**
 * @summary Get a milestone
 */
export const getMissionMilestone = (
    mission: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a milestone
 */
export const patchMissionMilestone = (
    mission: string,
    milestone: string,
    missionMilestonePatch: MissionMilestonePatch,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: missionMilestonePatch
    },
      options);
    }
  
/**
 * @summary Delete a milestone
 */
export const deleteMissionMilestone = (
    mission: string,
    milestone: string,
    params?: DeleteMissionMilestoneParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/milestones/${milestone}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Complete a milestone
 */
export const completeMissionMilestone = (
    mission: string,
    milestone: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionMilestone>(
      {url: `/missions/${mission}/milestones/${milestone}:complete`, method: 'POST'
    },
      options);
    }
  
/**
 * The leader will be able to see emails.

 * @summary Get all accounts in a mission
 */
export const getMissionAccounts = (
    mission: string,
    params?: GetMissionAccountsParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount[]>(
      {url: `/missions/${mission}/accounts`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Request to join a mission
- For admins: allow add any account
- For self: allow add your own account

 * @summary Join a mission
 */
export const postMissionAccount = (
    mission: string,
    missionAccountPost?: MissionAccountPost,
    params?: PostMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount | R204Response>(
      {url: `/missions/${mission}/accounts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionAccountPost,
        params
    },
      options);
    }
  
/**
 * @summary Get an account in a mission
 */
export const getMissionAccount = (
    mission: string,
    account: string,
    params?: GetMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount[]>(
      {url: `/missions/${mission}/accounts/${account}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Remove an account from a mission
 */
export const deleteMissionAccount = (
    mission: string,
    account: string,
    params?: DeleteMissionAccountParams,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/accounts/${account}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Reject a join request
 */
export const rejectMissionAccount = (
    mission: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<R204Response>(
      {url: `/missions/${mission}/accounts/${account}:reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Approve a join request
 */
export const approveMissionAccount = (
    mission: string,
    account: string,
 options?: SecondParameter<typeof customAxios>,) => {
      return customAxios<MissionAccount>(
      {url: `/missions/${mission}/accounts/${account}:approve`, method: 'POST'
    },
      options);
    }
  
/**
 * Endpoint to upload a file
 * @summary Upload a file
 */
export const uploadFile = (
    uploadFileBody: UploadFileBody,
    params: UploadFileParams,
 options?: SecondParameter<typeof customAxios>,) => {const formData = new FormData();
if(uploadFileBody.file !== undefined) {
 formData.append('file', uploadFileBody.file)
 }

      return customAxios<UploadFile200>(
      {url: `/files`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      options);
    }
  
export type GetHealthResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetAccountsResult = NonNullable<Awaited<ReturnType<typeof getAccounts>>>
export type PutAccountResult = NonNullable<Awaited<ReturnType<typeof putAccount>>>
export type BatchUpdateAccountsResult = NonNullable<Awaited<ReturnType<typeof batchUpdateAccounts>>>
export type GetAccountResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>
export type GetDiariesResult = NonNullable<Awaited<ReturnType<typeof getDiaries>>>
export type CreateDiaryResult = NonNullable<Awaited<ReturnType<typeof createDiary>>>
export type GetDiaryResult = NonNullable<Awaited<ReturnType<typeof getDiary>>>
export type UpdateDiaryResult = NonNullable<Awaited<ReturnType<typeof updateDiary>>>
export type DeleteDiaryResult = NonNullable<Awaited<ReturnType<typeof deleteDiary>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type PostEventResult = NonNullable<Awaited<ReturnType<typeof postEvent>>>
export type GetEventResult = NonNullable<Awaited<ReturnType<typeof getEvent>>>
export type PatchEventResult = NonNullable<Awaited<ReturnType<typeof patchEvent>>>
export type DeleteEventResult = NonNullable<Awaited<ReturnType<typeof deleteEvent>>>
export type GetMissionsResult = NonNullable<Awaited<ReturnType<typeof getMissions>>>
export type PostMissionResult = NonNullable<Awaited<ReturnType<typeof postMission>>>
export type GetMissionResult = NonNullable<Awaited<ReturnType<typeof getMission>>>
export type PatchMissionResult = NonNullable<Awaited<ReturnType<typeof patchMission>>>
export type DeleteMissionResult = NonNullable<Awaited<ReturnType<typeof deleteMission>>>
export type UndeleteMissionResult = NonNullable<Awaited<ReturnType<typeof undeleteMission>>>
export type RejectMissionResult = NonNullable<Awaited<ReturnType<typeof rejectMission>>>
export type LikeMissionResult = NonNullable<Awaited<ReturnType<typeof likeMission>>>
export type ApproveMissionResult = NonNullable<Awaited<ReturnType<typeof approveMission>>>
export type GetMissionMilestonesResult = NonNullable<Awaited<ReturnType<typeof getMissionMilestones>>>
export type PostMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof postMissionMilestone>>>
export type GetMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof getMissionMilestone>>>
export type PatchMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof patchMissionMilestone>>>
export type DeleteMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof deleteMissionMilestone>>>
export type CompleteMissionMilestoneResult = NonNullable<Awaited<ReturnType<typeof completeMissionMilestone>>>
export type GetMissionAccountsResult = NonNullable<Awaited<ReturnType<typeof getMissionAccounts>>>
export type PostMissionAccountResult = NonNullable<Awaited<ReturnType<typeof postMissionAccount>>>
export type GetMissionAccountResult = NonNullable<Awaited<ReturnType<typeof getMissionAccount>>>
export type DeleteMissionAccountResult = NonNullable<Awaited<ReturnType<typeof deleteMissionAccount>>>
export type RejectMissionAccountResult = NonNullable<Awaited<ReturnType<typeof rejectMissionAccount>>>
export type ApproveMissionAccountResult = NonNullable<Awaited<ReturnType<typeof approveMissionAccount>>>
export type UploadFileResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
