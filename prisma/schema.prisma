generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* -------------------------------------------------------------------------- */
/*                                    Auth                                    */
/* -------------------------------------------------------------------------- */
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  diaries       Diary[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

/* -------------------------------------------------------------------------- */
/*                                    Diary                                   */
/* -------------------------------------------------------------------------- */
model Diary {
	id        String   @id @default(uuid())
	accountId String
	account   User   @relation(fields: [accountId], references: [id], onDelete: Cascade)
	entryTime DateTime
	project   String   @db.VarChar(255)
	completionWeeks Int
	motivation Int
	learnings String @db.VarChar(6000)
	obstacles String @db.VarChar(6000)
	goals     DiaryGoal[]
	editableDiary Boolean @default(false)
	createTime DateTime @default(now())
	updateTime DateTime @updatedAt
	editableGoalCompletion Boolean @default(false)
}

model DiaryGoal {
	id        String   @id @default(uuid())
	title     String   @db.VarChar(255)
	completed Boolean  @default(false)
	diaryId   String
	diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
	createTime DateTime @default(now())
	updateTime DateTime @updatedAt
}
